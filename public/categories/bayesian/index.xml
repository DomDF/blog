<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bayesian on All Your Bayes</title>
    <link>/categories/bayesian/</link>
    <description>Recent content in Bayesian on All Your Bayes</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-uk</language>
    <lastBuildDate>Tue, 24 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/categories/bayesian/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why Go Bayesian?</title>
      <link>/post/why-go-bayesian/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/why-go-bayesian/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;This post is intended to be a high-level discussion of the merits and challenges of applied Bayesian statistics. It is intended to help the reader answer: &lt;em&gt;Is it worth me learning Bayesian statistics?&lt;/em&gt; or &lt;em&gt;Should I look into using Bayesian statistics in my project?&lt;/em&gt; Maths, code and technical details have all been left out.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;bayes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Bayes&lt;/h4&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/TJBbXQooivUNq/giphy.gif&#34; alt=&#34;Bayes&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Bayes&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Firstly, Bayesian…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statistics&lt;/li&gt;
&lt;li&gt;Inference&lt;/li&gt;
&lt;li&gt;Modelling&lt;/li&gt;
&lt;li&gt;Updating&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…can be considered the same thing (certainly for the purposes of this post): &lt;strong&gt;the application of Bayes theorem to quantify uncertainty&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So Bayesian statistics may be of interest to you if you are dealing with a problem associated with uncertainty - either due to some underlying variability, or due to limitations of your data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-does-a-bayesian-approach-provide&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What does a Bayesian Approach Provide?&lt;/h3&gt;
&lt;p&gt;Bayesian statistics is not the only way to account for uncertainty in calculations. The below points describe what a Bayesian approach offers, that others don’t. Note that I am only really discussing methods involving probability here, though &lt;a href=&#34;https://www.springer.com/gp/book/9783540402947&#34;&gt;alternative approaches are available&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;intuitive-interpretation-of-results&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Intuitive Interpretation of Results&lt;/h4&gt;
&lt;p&gt;The outcome of a Bayesian model is a posterior distribution. This describes the joint uncertainty in all the parameters you are trying to estimate. This can be used to describe uncertainty in a prediction for some new input data. By comparison, alternative (frequentist) methods typically describes uncertainty in predictions using confidence intervals, which are widely used but easy to misinterpret.&lt;/p&gt;
&lt;p&gt;Confidence intervals are calculated so that they will contain the &lt;em&gt;true&lt;/em&gt; value of whatever you are trying to predict with some desired frequency. They provide no information (in the absence of additional assumptions) on how credible various possible results are. The Bayesian equivalent (sometimes called credible intervals) can be drawn anywhere on a predictive distribution. In &lt;a href=&#34;https://mitpress.mit.edu/books/introduction-statistical-decision-theory&#34;&gt;Pratt, Raiffa and Schlaiffer’s textbook&lt;/a&gt; an example is used to highlight this difference:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Imagine the plight of the manager who exclaims, ‘I understand [does he?] the meaning that the demand for XYZ will lie in the interval 973 to 1374 with confidence .90. However, I am particularly interested in the interval 1300 to 1500. What confidence can I place on that interval?’&lt;/em&gt;
&lt;em&gt;Unfortunately, this question cannot be answered. Of course, however, it is possible to give a posterior probability to that particular interval - or any other - based on the sample data and on a codification of the manager’s prior judgements.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And a more succinct description of the same view from &lt;a href=&#34;https://www.weirdfishes.blog/&#34;&gt;Dan Ovando’s fishery statistics blog&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bayesian credible intervals mean what we’d like Frequentist confidence intervals to mean.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seamless-integration-with-decision-analysis&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Seamless Integration with Decision Analysis&lt;/h4&gt;
&lt;p&gt;Following on from the previous point, an analysis that directly describes the probability of any outcome is fully compatible with a decision analysis. After completing a Bayesian analysis, identifying the optimal strategy implied by your model becomes simpler and more understandable.&lt;/p&gt;
&lt;p&gt;As stated in &lt;a href=&#34;https://www.springer.com/gp/book/9780387960982&#34;&gt;James Berger’s (quite theoretical) book on Bayesian statistics&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bayesian analysis and decision theory go rather naturally together, partly because of their common goal of utilizing non-experimental sources of information, and partly because of deep theoretical ties.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;flexible-modelling&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Flexible Modelling&lt;/h4&gt;
&lt;p&gt;So this one is based on a point made in &lt;a href=&#34;https://uk.sagepub.com/en-gb/eur/a-student%E2%80%99s-guide-to-bayesian-statistics/book245409&#34;&gt;Ben Lambert’s book on Bayesian statistics&lt;/a&gt;. It is regarding how modern Bayesian statistics is achieved in practice. The computational methods require some effort to pick up, especially if you do not have experience with programming (though Ben Lambert’s book gives a nice introduction to &lt;a href=&#34;https://mc-stan.org/&#34;&gt;Stan&lt;/a&gt;). However, they can be readily extended to larger and more complex models.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/WiyczarN2XMm4/giphy.gif&#34; alt=&#34;Some Compelling Arguments&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Some Compelling Arguments&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;challenges-difficulties&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Challenges &amp;amp; Difficulties&lt;/h3&gt;
&lt;p&gt;So why would anyone ever &lt;em&gt;not&lt;/em&gt; use Bayesian models when making predictions?&lt;/p&gt;
&lt;div id=&#34;subjectivity&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Subjectivity&lt;/h4&gt;
&lt;p&gt;Perhaps the most common criticism of Bayesian statistics is the requirement for prior models. An initial estimate of uncertainty is a term in Bayes’ theorem - but how can you estimate the extent of variability before you see it in your data? This will surely be completely subjective, so the results will vary depending on who is doing the analysis. This, understandably, doesn’t seem right with a lot of casual enquirers.&lt;/p&gt;
&lt;p&gt;A common response to this accusation is that subjectivity is not an exclusive feature of Bayesian analysis (how about the whole structure of the model you are trying to fit, regardless of your method?) &lt;em&gt;…but&lt;/em&gt; at least Bayesians are required to be explicit about it. Priors are part of the model with no-where to hide (in the code or the reporting) and so they are open to criticism. This point is discussed in &lt;strong&gt;much&lt;/strong&gt; more detail in this paper from &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/research/published/gelman_hennig_full_discussion.pdf&#34;&gt;Colombia University&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Priors can contain, as much or as little, information as desired. However, even in instances where you may feel you don’t have any upfront knowledge of a problem, they represent a valuable opportunity for introducing regularisation (which protects against bad predictions due to overfitting). This idea is discussed in detail in &lt;a href=&#34;https://www.crcpress.com/Statistical-Rethinking-A-Bayesian-Course-with-Examples-in-R-and-STAN/McElreath/p/book/9780367139919&#34;&gt;Richard McElreath’s textbook&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;computational-requirements&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Computational Requirements&lt;/h4&gt;
&lt;p&gt;In practice, statisticians estimate Bayesian posterior distributions using Markov Chain Monte Carlo (MCMC) sampling algorithms. This approach is slower, more complicated and less informative than standard, independent Monte Carlo sampling. The models that I have worked with during my PhD have taken several hours to finish sampling from, but I have met statisticians whose models run for days or even weeks. Following this, there are checks that need to be completed as there are plenty of things that can go wrong with MCMC.&lt;/p&gt;
&lt;p&gt;My background is in mechanical and civil engineering. In discussions with engineering researchers at conferences I have often been told that the errors and complications they encountered when using MCMC methods had made them believe that Bayesian statistics wasn’t for them. These are challenges that I imagine everyone who has attempted modern Bayesian statistics will have encountered and resolving them can require a deep understanding of your model. Both domain-specific and statistical knowledge is required to help ensure the model you are trying to fit is justified. In addition some programming &lt;em&gt;tricks&lt;/em&gt; like reparameterisation can be of great help to your software, which sometimes needs equivalent, but easier to interpret instructions.&lt;/p&gt;
&lt;p&gt;With all that in mind, when would this ever be worthwhile?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Regardless of whether you believe we exist in a deterministic universe or not, you will never have perfect state of knowledge describing your problem: uncertainty exists, so we need a sensible and safe way of accounting for it.&lt;/p&gt;
&lt;p&gt;I believe that Bayesian statistics is actually well suited to traditional engineering problems, which are concerned with managing risk when confronted with small, messy datasets and models with plenty of uncertainty. As suggested in the earlier description of confidence intervals, frequentist statistics defines probability based on occurrences of events following a large number of trials or samples. When only limited data is available, Bayesian statistics can shine by comparison.&lt;/p&gt;
&lt;p&gt;Very large datasets may contain enough information to precisely estimate parameters in a model using standard machine learning methods, and so it becomes less worthwhile running simulations to characterise variability. But how common are these big data problems in science and engineering? Sometimes large populations of data are better described as multiple smaller constituent groups, after accounting for key differences between them. Bayesian statistics has a very useful way of managing such problems by structuring models hierarchically. This method allows for &lt;strong&gt;partial pooling of information&lt;/strong&gt; between groups, so that predictions account for the variability and commonality between groups. I will provide a detailed example of this in a future post.&lt;/p&gt;
&lt;p&gt;In conclusion, Bayesian statistics requires (computational and personal) effort to apply. But it provides results that are (usually) more interpretable and closely linked to the questions we want to answer. Whether or not these methods are worth learning of course depend on personal circumstances. I encountered Bayesian statistics during my PhD, and so had plenty of time to read up and I’ve found this to be very rewarding and enjoyable…&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/WPLPEu0GUp41W/giphy.gif&#34; alt=&#34;Boring, isn’t it? Writing, Fitting and Evaluating Bayesian Models All Day….&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Boring, isn’t it? Writing, Fitting and Evaluating Bayesian Models All Day….&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bayesian Logistic Regression with Stan</title>
      <link>/post/bayesian-regression-models-with-stan/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/bayesian-regression-models-with-stan/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;Logistic regression is a popular machine learning model. One application of it in an engineering context is quantifying the effectiveness of inspection technologies at detecting damage. This post describes the additional information provided by a Bayesian application of logistic regression (and how it can be implemented using the &lt;code&gt;Stan&lt;/code&gt; probabilistic programming language). Finally, I’ve also included some recommendations for making sense of priors.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;introductions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introductions&lt;/h3&gt;
&lt;p&gt;So there are a couple of key topics discussed here: Logistic Regression, and Bayesian Statistics. Before jumping straight into the example application, I’ve provided some &lt;strong&gt;very&lt;/strong&gt; brief introductions below.&lt;/p&gt;
&lt;div id=&#34;bayesian-inference&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Bayesian Inference&lt;/h4&gt;
&lt;p&gt;At a very high level, Bayesian models quantify (aleatory and epistemic) uncertainty, so that our predictions and decisions take into account the ways in which our knowledge is limited or imperfect. We specify a statistical model, and identify probabilistic estimates for the parameters using a family of sampling algorithms known as Markov Chain Monte Carlo (MCMC). My preferred software for writing a fitting Bayesian models is &lt;a href=&#34;https://mc-stan.org/&#34;&gt;&lt;code&gt;Stan&lt;/code&gt;&lt;/a&gt;. If you are not yet familiar with Bayesian statistics, then I imagine you won’t be fully satisfied with that 3 sentence summary, so I will put together a separate post on the merits and challenges of applied Bayesian inference, which will include much more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;logistic-regression&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Logistic Regression&lt;/h4&gt;
&lt;p&gt;Logistic regression is used to estimate the probability of a binary outcome, such as &lt;em&gt;Pass&lt;/em&gt; or &lt;em&gt;Fail&lt;/em&gt; (though it can be extended for &lt;code&gt;&amp;gt; 2&lt;/code&gt; outcomes). This is achieved by transforming a standard regression using the logit function, shown below. The term in the brackets may be familiar to gamblers as it is how odds are calculated from probabilities. You may see &lt;em&gt;logit&lt;/em&gt; and &lt;em&gt;log-odds&lt;/em&gt; used exchangeably for this reason.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Logit (x) = \log\Bigg({\frac{x}{1 - x}}\Bigg)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since the logit function transformed data &lt;em&gt;from&lt;/em&gt; a probability scale, the inverse logit function transforms data &lt;em&gt;to&lt;/em&gt; a probability scale. Therefore, as shown in the below plot, it’s values range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, and this feature is very useful when we are interested the probability of &lt;em&gt;Pass&lt;/em&gt;/&lt;em&gt;Fail&lt;/em&gt; type outcomes.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
Inverse\;Logit (x) = \frac{1}{1 + \exp(-x)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-14-bayesian-logistic-regression-with-stan_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Before moving on, some terminology that you may find when reading about logistic regression elsewhere:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a linear regression is combined with a re-scaling function such as this, it is known as a Generalised Linear Model (&lt;strong&gt;GLM&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;The re-scaling (in this case, the logit) function is known as a &lt;strong&gt;link function&lt;/strong&gt; in this context.&lt;/li&gt;
&lt;li&gt;Logistic regression is a &lt;strong&gt;Bernoulli-Logit GLM&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may be familiar with libraries that automate the fitting of logistic regression models, either in &lt;code&gt;Python&lt;/code&gt; (via &lt;code&gt;sklearn&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X = dataset[&amp;#39;input_variables&amp;#39;], y = dataset[&amp;#39;predictions&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…or in &lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_fit &amp;lt;- glm(formula = preditions ~ input_variables,
                 data = dataset, family = binomial(link = &amp;#39;logit&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;example-application-probability-of-detection&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example Application: Probability of Detection&lt;/h3&gt;
&lt;p&gt;To demonstrate how a Bayesian logistic regression model can be fit (and utilised), I’ve included an example from one of my papers. Engineers make use of data from inspections to understand the condition of structures. Modern inspection methods, whether remote, autonomous or manual application of sensor technologies, are very good. They are generally evaluated in terms of the accuracy and reliability with which they size damage. Engineers never receive perfect information from an inspection, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a crack of &lt;strong&gt;exact&lt;/strong&gt; length &lt;code&gt;30 mm&lt;/code&gt; and &lt;strong&gt;exact&lt;/strong&gt; depth &lt;code&gt;5 mm&lt;/code&gt; at this &lt;strong&gt;exact&lt;/strong&gt; location, or&lt;/li&gt;
&lt;li&gt;There is &lt;strong&gt;definitely&lt;/strong&gt; no damage at this location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For various reasons, the information we receive from inspections is imperfect and this is something that engineers need to deal with. As a result, providers of inspection services are requested to provide some measure of how good their product is. This typically includes some measure of how accurately damage is sized and how reliable an outcome (detection or no detection) is.&lt;/p&gt;
&lt;p&gt;This example will consider trials of an inspection tool looking for damage of varying size, to fit a model that will predict the probability of detection for any size of damage. Since various forms of damage can initiate in structures, each requiring inspection methods that are suitable, let’s avoid ambiguity and imagine we are only looking for cracks.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/42wQXwITfQbDGKqUP7/giphy.gif&#34; alt=&#34;Detecting Damage: Never 100% Reliable&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Detecting Damage: Never 100% Reliable&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;test-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Test Data&lt;/h4&gt;
&lt;p&gt;For the purposes of this example we will simulate some data. Let’s imagine we have introduced some cracks (of known size) into some test specimens and then arranged for some blind trials to test whether an inspection technology is able to detect them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1008)

N &amp;lt;- 30; lower &amp;lt;- 0; upper &amp;lt;- 10; alpha_true &amp;lt;- -1; beta_true &amp;lt;- 1

depth &amp;lt;- runif(n = N, min = lower, max = upper)

PoD_1D &amp;lt;- function(depth, alpha_1D, beta_1D){
  PoD &amp;lt;- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
  return (PoD)
}

pod_df &amp;lt;- data.frame(depth = depth, det = double(length = N))

for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
  
  pod_df$det[i] = rbernoulli(n = 1, 
                             p = PoD_1D(depth = pod_df$depth[i], 
                                       alpha_1D = alpha_true, 
                                       beta_1D = beta_true))
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code is used to create 30 crack sizes (depths) between 0 and 10 mm. We then use a log-odds model to back calculate a probability of detection for each. This is based on some fixed values for &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. In a real trial, these would not be known, but since we are inventing the data we can see how successful our model ends up being in estimating these values.&lt;/p&gt;
&lt;p&gt;The below plot shows the size of each crack, and whether or not it was detected (in our simulation). The smallest crack that was detected was 2.22 mm deep, and the largest undetected crack was 5.69 mm deep. Even so, it’s already clear that larger cracks are more likely to be detected than smaller cracks, though that’s just about all we can say at this stage.&lt;/p&gt;
&lt;p&gt;After fitting our model, we will be able to predict the probability of detection for a crack of any size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-14-bayesian-logistic-regression-with-stan_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stan&lt;/code&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Probabilistic_programming&#34;&gt;probabilistic programming language&lt;/a&gt;. In a future post I will explain why it has been my preferred software for statistical inference throughout my PhD.&lt;/p&gt;
&lt;p&gt;The below is a simple &lt;code&gt;Stan&lt;/code&gt; program to fit a Bayesian Probability of Detection (PoD) model:&lt;/p&gt;
&lt;pre class=&#34;stan&#34;&gt;&lt;code&gt;data {

  int &amp;lt;lower = 0&amp;gt; N; // Defining the number of defects in the test dataset
  int &amp;lt;lower = 0, upper = 1&amp;gt; det [N]; // A variable that describes whether each defect was detected [1]or not [0]
  vector &amp;lt;lower = 0&amp;gt; [N] depth; // A variable that describes the corresponding depth of each defect
  
  int &amp;lt;lower = 0&amp;gt; K; // Defining the number of probabilistic predictions required from the model
  vector &amp;lt;lower = 0&amp;gt; [K] depth_pred;
  
}

parameters {
  
  // The (unobserved) model parameters that we want to recover
  real alpha;
  real beta;
  
}

model {

  // A logistic regression model relating the defect depth to whether it will be detected
  det ~ bernoulli_logit(alpha + beta * log(depth));
  
  // Prior models for the unobserved parameters
  alpha ~ normal(0, 1);
  beta ~ normal(1, 1);

}

generated quantities {
  
  // Using the fitted model for probabilistic predicition
  // K posterior predictive distributions will be estimated for a corresponding crack depth
  vector [K] postpred_pr;
  
  for (k in 1:K) {
    
    postpred_pr[k] = inv_logit(alpha + beta * log(depth_pred[k]));
    
  }
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;generated quantities&lt;/code&gt; block will be used to make predictions for the &lt;code&gt;K&lt;/code&gt; values of &lt;code&gt;depth_pred&lt;/code&gt; that we provide.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;K &amp;lt;- 50; depth_pred &amp;lt;- seq(from = lower, to = upper, length.out = K)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code generates 50 evenly spaced values, which we will eventually combine in a plot. In some instances we may have specific values that we want to generate probabilistic predictions for, and this can be achieved in the same way.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-the-model&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Fitting the model&lt;/h4&gt;
&lt;p&gt;Data can be pre-processed in any language for which a &lt;code&gt;Stan&lt;/code&gt; interface has been developed. This includes, &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;, and &lt;code&gt;Julia&lt;/code&gt;. In this example we will use &lt;code&gt;R&lt;/code&gt; and the accompanying package, &lt;code&gt;rstan&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;Stan&lt;/code&gt; model is expecting data for three variables: &lt;strong&gt;N&lt;/strong&gt;, &lt;strong&gt;det&lt;/strong&gt;, &lt;strong&gt;depth&lt;/strong&gt;, &lt;strong&gt;K&lt;/strong&gt; and &lt;strong&gt;depth_pred&lt;/strong&gt; and &lt;code&gt;rstan&lt;/code&gt; requires this in the form of a list.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Results&lt;/h4&gt;
&lt;p&gt;Once we have our data, and are happy with our model, we can set off the Markov chains. There are plenty of opportunities to control the way that the &lt;code&gt;Stan&lt;/code&gt; algorithm will run, but I won’t include that here, rather we will mostly stick with the default arguments in &lt;code&gt;rstan&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rstan)

PoD_samples &amp;lt;- sampling(object = PoD_model, 
                        data = list(N = N, det = pod_df$det, depth = pod_df$depth,
                                    K = K, depth_pred = depth_pred), 
                        seed = 1008)
## 
## SAMPLING FOR MODEL &amp;#39;7e5f8dcf245c90341e1fcbe2d195277e&amp;#39; NOW (CHAIN 1).
## Chain 1: 
## Chain 1: Gradient evaluation took 0 seconds
## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 1: Adjust your expectations accordingly!
## Chain 1: 
## Chain 1: 
## Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 1: 
## Chain 1:  Elapsed Time: 0.063 seconds (Warm-up)
## Chain 1:                0.058 seconds (Sampling)
## Chain 1:                0.121 seconds (Total)
## Chain 1: 
## 
## SAMPLING FOR MODEL &amp;#39;7e5f8dcf245c90341e1fcbe2d195277e&amp;#39; NOW (CHAIN 2).
## Chain 2: 
## Chain 2: Gradient evaluation took 0 seconds
## Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 2: Adjust your expectations accordingly!
## Chain 2: 
## Chain 2: 
## Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 2: 
## Chain 2:  Elapsed Time: 0.061 seconds (Warm-up)
## Chain 2:                0.059 seconds (Sampling)
## Chain 2:                0.12 seconds (Total)
## Chain 2: 
## 
## SAMPLING FOR MODEL &amp;#39;7e5f8dcf245c90341e1fcbe2d195277e&amp;#39; NOW (CHAIN 3).
## Chain 3: 
## Chain 3: Gradient evaluation took 0 seconds
## Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 3: Adjust your expectations accordingly!
## Chain 3: 
## Chain 3: 
## Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 3: 
## Chain 3:  Elapsed Time: 0.136 seconds (Warm-up)
## Chain 3:                0.146 seconds (Sampling)
## Chain 3:                0.282 seconds (Total)
## Chain 3: 
## 
## SAMPLING FOR MODEL &amp;#39;7e5f8dcf245c90341e1fcbe2d195277e&amp;#39; NOW (CHAIN 4).
## Chain 4: 
## Chain 4: Gradient evaluation took 0 seconds
## Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 4: Adjust your expectations accordingly!
## Chain 4: 
## Chain 4: 
## Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 4: 
## Chain 4:  Elapsed Time: 0.235 seconds (Warm-up)
## Chain 4:                0.079 seconds (Sampling)
## Chain 4:                0.314 seconds (Total)
## Chain 4:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:I’ve not included any detail here on the checks we need to do on our samples. There are some common challenges associated with MCMC methods, each with plenty of associated guidance on how to diagnose and resolve them. For now, let’s assume everything has gone to plan.&lt;/p&gt;
&lt;p&gt;Now, there are a few options for extracting samples from a stanfit object such as &lt;code&gt;PoD_samples&lt;/code&gt;, including &lt;code&gt;rstan::extract()&lt;/code&gt;. However, these usually require a little post-processing to get them into a tidy format - no big deal, but a hassle I’d rather avoid. That’s why I like to use the &lt;code&gt;ggmcmc&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/ggmcmc/&#34;&gt;package&lt;/a&gt;, which we can use to create a data frame that specifies the iteration, parameter value and chain associated with each data point:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggmcmc)

PoD_extracted_samples &amp;lt;- ggs(S = PoD_samples)

head(x = PoD_extracted_samples, n = 5)
## # A tibble: 5 x 4
##   Iteration Chain Parameter  value
##       &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;
## 1         1     1 alpha     -1.35 
## 2         2     1 alpha     -1.13 
## 3         3     1 alpha     -0.537
## 4         4     1 alpha     -0.304
## 5         5     1 alpha     -0.679&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have sampled from a 2-dimensional posterior distribution of the unobserved parameters in the model: &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. Below is a density plot of their corresponding marginal distributions based on the &lt;code&gt;1000&lt;/code&gt; samples collected from each of the &lt;code&gt;4&lt;/code&gt; Markov chains that have been run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-14-bayesian-logistic-regression-with-stan_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So our estimates are beginning to converge on the values that were used to generate the data, but this plot also shows that there is still plenty of uncertainty in the results. Unlike many alternative approaches, Bayesian models account for the statistical uncertainty associated with our limited dataset - remember that we are estimating these values from 30 trials. These results describe the possible values of &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; in our model that are consistent with the limited available evidence. If more data was available, we could expect the uncertainty in our results to decrease. I think there are some great reasons to keep track of this statistical (sometimes called &lt;em&gt;epistemic&lt;/em&gt;) uncertainty - a primary example being that we should be interested in how confident our predictive models are in their own results!
…but I’ll leave it at that for now, and try to stay on topic.&lt;/p&gt;
&lt;p&gt;How do we know what do these estimates of &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; mean for the PoD (what we are ultimately interested in)?
We can check this using the posterior predictive distributions that we have (thanks to the &lt;code&gt;generated quantities&lt;/code&gt; block of the &lt;code&gt;Stan&lt;/code&gt; program).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-14-bayesian-logistic-regression-with-stan_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One thing to note from these results is that the model is able to make much more confident predictions for larger crack sizes. The increased uncertainty associated with shallow cracks reflects the lack of data available in this region - this could be useful information for a decision maker!&lt;/p&gt;
&lt;p&gt;There are only 3 trials in our dataset considering cracks shallower than 3 mm (and only 1 for crack depths &lt;code&gt;&amp;lt; 2&lt;/code&gt; mm). If we needed to make predictions for shallow cracks, this analysis could be extended to quantify the value of future tests in this region.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-thought-where-did-those-priors-come-from-and-are-they-any-good&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Final Thought: Where Did Those Priors Come From and Are They Any Good?&lt;/h4&gt;
&lt;p&gt;There are many approaches for specifying prior models in Bayesian statistics. &lt;em&gt;Weakly informative&lt;/em&gt; and &lt;em&gt;MaxEnt&lt;/em&gt; priors are advocated by various authors. Unfortunately, &lt;em&gt;Flat Priors&lt;/em&gt; are sometimes proposed too, particularly (but not exclusively) in older books. A flat prior is a wide distribution - in the extreme this would be a uniform distribution across all real numbers, but in practice distribution functions with very large variance parameters are sometimes used. In either case, a very large range prior of credible outcomes for our parameters is introduced the model. This may sound innocent enough, and in many cases could be harmless.&lt;/p&gt;
&lt;p&gt;Flat priors have the appeal of describing a state of complete uncertainty, which we may believe we are in before seeing any data - but is this really the case?&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/UgM7H8OEmf4mQ/giphy.gif&#34; alt=&#34;Prior Expectations: Can We Do Better?&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Prior Expectations: Can We Do Better?&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Suppose you are using Bayesian methods to model the speed of some athletes. Even before seeing any data, there is some information that we can build into the model. For instance, we can discount negative speeds. We also wouldn’t need to know anything about the athletes to know that they would not be travelling faster than the speed of light. This may sound facetious, but flat priors are implying that we should treat all outcomes as equally likely. In fact, there are some cases where flat priors cause models to require large amounts of data to make good predictions (meaning we are failing to take advantage of Bayesian statistics ability to work with limited data).&lt;/p&gt;
&lt;p&gt;In this example, we would probably just want to constrain outcomes to the range of metres per second, but the amount of information we choose to include is ultimately a modelling choice. Another helpful feature of Bayesian models is that the priors are part of the model, and so must be made explicit - fully visible and ready to be scrutinised.&lt;/p&gt;
&lt;p&gt;A common challenge, which was evident in the above PoD example, is lacking an intuitive understanding of the meaning of our model parameters. Here &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; required prior models, but I don’t think there is an obvious way to relate their values to the result we were interested in. They are linear regression parameters on a log-odds scale, but this is then transformed into a probability scale using the logit function.&lt;/p&gt;
&lt;p&gt;This problem can be addressed using a process known as &lt;strong&gt;Prior Predictive Simulation&lt;/strong&gt;, which I was first introduced to in &lt;a href=&#34;https://www.crcpress.com/Statistical-Rethinking-A-Bayesian-Course-with-Examples-in-R-and-STAN/McElreath/p/book/9780367139919&#34;&gt;Richard McElreath’s fantastic book&lt;/a&gt;. This involves evaluating the predictions that our model would make, based only on the information in our priors. Relating our predictions to our parameters provides a clearer understanding of the implications of our priors.&lt;/p&gt;
&lt;p&gt;Back to our PoD parameters - both &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; can take positive or negative values, but I could not immediately tell you a sensible range for them. Based on our lack of intuition it may be tempting to use a variance for both, right? Well, before making that decision, we can always simulate some predictions from these priors. The below code is creating a data frame of prior predictions for the PoD (&lt;code&gt;PoD_pr&lt;/code&gt;) for many possible crack sizes.
&lt;span class=&#34;math display&#34;&gt;\[
\alpha \sim N(\mu_{\alpha}, \sigma_{\alpha})
\]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[
\beta \sim N(\mu_{\beta}, \sigma_{\beta})
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- seq(from = min_depth, to = max_depth, length.out = N_samples)
prPrSim_df &amp;lt;- data.frame(depth = x)

for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
  
  alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha)
  beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
  prPrSim_df$PoD_pr[i] &amp;lt;- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))

}

head(prPrSim_df)
##        depth       PoD_pr
## 1 0.00000000 0.000000e+00
## 2 0.01001001 4.085619e-05
## 3 0.02002002 5.966123e-02
## 4 0.03003003 4.766970e-05
## 5 0.04004004 4.532144e-03
## 6 0.05005005 2.997338e-03&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can visualise the information contained within our priors for a couple of different cases.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-14-bayesian-logistic-regression-with-stan_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Our wide, supposedly &lt;em&gt;non&lt;/em&gt;-informative priors result in some pretty useless predictions. I’ve suggested some more sensible priors that suggest that larger cracks are more likely to be detected than small cracks, without overly constraining our outcome (see that there is still prior credible that very small cracks are detected reliably and that very large cracks are often missed).&lt;/p&gt;
&lt;p&gt;Why did our predictions end up looking like this?&lt;/p&gt;
&lt;p&gt;Borrowing from McElreath’s explanation, it’s because &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; are linear regression parameters on a log-odds (logit) scale. Since we are estimating a PoD we end up transforming out predictions onto a probability scale. Flat priors for our parameters imply that extreme values of log-odds are credible. All that prior credibility of values &lt;code&gt;&amp;lt; - 3&lt;/code&gt; and &lt;code&gt;&amp;gt; 3&lt;/code&gt; ends up getting concentrated at probabilities near &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. I think this is a really good example of flat priors containing a lot more information than they appear to.&lt;/p&gt;
&lt;p&gt;I’ll end by directing you towards some additional (generally non-technical) discussion of choosing priors, written by the &lt;code&gt;Stan&lt;/code&gt; development team &lt;a href=&#34;https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations&#34;&gt;(link)&lt;/a&gt;. It provides a definition of &lt;em&gt;weakly informative priors&lt;/em&gt;, some words of warning against &lt;em&gt;flat priors&lt;/em&gt; and more general detail than this humble footnote.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-14-bayesian-logistic-regression-with-stan_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
