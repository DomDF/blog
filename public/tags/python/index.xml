<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on All Your Bayes</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on All Your Bayes</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-uk</language>
    <lastBuildDate>Tue, 28 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maximum Likelihood Estimation</title>
      <link>/post/maximum-likelihood-estimation/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/maximum-likelihood-estimation/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;Maximum Likelihood Estimation (MLE) is one method of inferring model parameters. This post aims to give an intuitive explanation of MLE, discussing why it is so useful (simplicity and availability in software) as well as where it is limited (point estimates are not as informative as Bayesian estimates, which are also shown for comparison).&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Distribution parameters describe the shape of a distribution function. A normal (Gaussian) distribution is characterised based on it’s mean, &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; and standard deviation, &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;. Increasing the mean &lt;em&gt;shifts&lt;/em&gt; the distribution to be centered at a larger value and increasing the standard deviation &lt;em&gt;stretches&lt;/em&gt; the function to give larger values further away from the mean. When we approximate some uncertain data with a distribution function, we are interested in estimating the distribution parameters that are most consistent with the data.&lt;/p&gt;
&lt;p&gt;The likelihood, &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;, of some data, &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;, is shown below. Where &lt;span class=&#34;math inline&#34;&gt;\(f(\theta)\)&lt;/span&gt; is the function that has been proposed to explain the data, and &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; are the parameter(s) that characterise that function.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
L = \displaystyle\prod_{i=1}^{N} f(z_{i} \mid \theta)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Likelihood values (and therefore also the product of many likelihood values) can be very small, so small that they cause problems for software. Therefore it’s usually more convenient to work with log-likelihoods instead. Taking the logarithm is applying a &lt;em&gt;monotonically increasing&lt;/em&gt; function. This means if one function has a higher sample likelihood than another, then it will also have a higher log-likelihood. Also, the location of maximum log-likelihood will be also be the location of the maximum likelihood.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\log{(L)} = \displaystyle\sum_{i=1}^{N} f(z_{i} \mid \theta)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The distribution parameters that maximise the log-likelihood function, &lt;span class=&#34;math inline&#34;&gt;\(\theta^{*}\)&lt;/span&gt;, are those that correspond to the maximum sample likelihood.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\theta^{*} = arg \max_{\theta} \bigg[ \log{(L)} \bigg]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Below, two different normal distributions are proposed to describe a pair of observations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;obs &amp;lt;- c(0, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The red distribution has a mean value of &lt;code&gt;1&lt;/code&gt; and a standard deviation of &lt;code&gt;2&lt;/code&gt;. The green distribution has a mean value of &lt;code&gt;2&lt;/code&gt; and a standard deviation of &lt;code&gt;1&lt;/code&gt; and so is centered further to the right, and is less dispersed (less stretched out). The red arrows point to the likelihood values of the data associated with the red distribution, and the green arrows indicate the likelihood of the same data with respect to the green function. The first data point, 0 is more likely to have been generated by the red function, and the second data point, 3 is more likely to have been generated by the green function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-28-maximum-likelihood-estimation_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can evaluate the log-likelihood and compare the two functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(log(dnorm(x = obs, mean = 1, sd = 2))) # Red function
## [1] -3.849171

sum(log(dnorm(x = obs, mean = 2, sd = 1))) # Green function
## [1] -4.337877&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As shown above, the red distribution has a higher log-likelihood (and therefore also a higher likelihood) than the green function, with respect to the 2 data points. The above graph suggests that this is driven by the first data point , 0 being significantly more consistent with the red function. The below example looks at how a distribution parameter that maximises a sample likelihood could be identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mle-for-an-exponential-distribution&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;MLE for an Exponential Distribution&lt;/h3&gt;
&lt;p&gt;The exponential distribution is characterised by a single parameter, it’s rate &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(z, \lambda) = \lambda \cdot \exp^{- \lambda \cdot z}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It is a widely used distribution, as it is a Maximum Entropy (MaxEnt) solution. If some unknown parameters is known to be positive, with a fixed mean, then the function that best conveys this (and only this) information is the exponential distribution. I plan to write a future post about the MaxEnt principle, as it is deeply linked to Bayesian statistics. The expectation (mean), &lt;span class=&#34;math inline&#34;&gt;\(E[y]\)&lt;/span&gt; and variance, &lt;span class=&#34;math inline&#34;&gt;\(Var[y]\)&lt;/span&gt; of an exponentially distributed parameter, &lt;span class=&#34;math inline&#34;&gt;\(y \sim exp(\lambda)\)&lt;/span&gt; are shown below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
E[y] = \lambda^{-1}, \; Var[y] = \lambda^{-2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Simulating some example data…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_samples &amp;lt;- 25; true_rate &amp;lt;- 1; set.seed(1)

exp_samples &amp;lt;- rexp(n = n_samples,
                    rate = true_rate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code, 25 independent random samples have been taken from an exponential distribution with a mean of 1, using &lt;code&gt;rexp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below, for various proposed &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; values, the log-likelihood (&lt;code&gt;log(dexp())&lt;/code&gt;) of the sample is evaluated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
exp_lik_df &amp;lt;- data.frame(rate = double(), 
                         lik = double())

for (i in seq(from = 0.2, to = 2, by = 0.2)){
  
  exp_lik_df &amp;lt;- rbind(exp_lik_df, 
                      data.frame(rate = i,
                                 log_lik = sum(log(
                                   dexp(x = exp_samples,
                                        rate = i)))))
  
}

max_log_lik &amp;lt;- exp_lik_df[which.max(x = exp_lik_df$log_lik),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, &lt;code&gt;max_log_lik&lt;/code&gt; finds which of the proposed &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; values is associated with the highest log-likelihood.&lt;/p&gt;
&lt;p&gt;We can print out the data frame that has just been created and check that the maximum has been correctly identified.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(exp_lik_df)
##    rate   log_lik
## 1   0.2 -45.38774
## 2   0.4 -33.21086
## 3   0.6 -28.22602
## 4   0.8 -26.18577
## 5   1.0 -25.75897
## 6   1.2 -26.35273
## 7   1.4 -27.65076
## 8   1.6 -29.46427
## 9   1.8 -31.67149
## 10  2.0 -34.18927

print(max_log_lik)
##   rate   log_lik
## 5    1 -25.75897&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The below plot shows how the sample log-likelihood varies for different values of &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;. It also shows the shape of the exponential distribution associated with the lowest (top-left), optimal (top-centre) and highest (top-right) values of &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; considered in these iterations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-28-maximum-likelihood-estimation_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;mle-in-practice-software-libraries&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;MLE in Practice: Software Libraries&lt;/h4&gt;
&lt;p&gt;In practice there are many software packages that quickly and conveniently automate MLE. Here are some useful examples…&lt;/p&gt;
&lt;p&gt;Firstly, using the &lt;code&gt;fitdistrplus&lt;/code&gt; library in &lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
library(fitdistrplus)

sample_data &amp;lt;- exp_samples

rate_fit_R &amp;lt;- fitdist(data = sample_data, 
                      distr = &amp;#39;exp&amp;#39;, 
                      method = &amp;#39;mle&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although I have specified &lt;code&gt;mle&lt;/code&gt; (maximum likelihood estimation) as the method that I would like &lt;code&gt;R&lt;/code&gt; to use here, it is already the default argument and so we didn’t need to include it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; provides us with an list of plenty of useful information, including:
- the original data
- the size of the dataset
- the co-variance matrix (especially useful if we are estimating multiple parameters)
- some measures of well the parameters were estimated&lt;/p&gt;
&lt;p&gt;You can explore these using &lt;code&gt;$&lt;/code&gt; to check the additional information available.&lt;/p&gt;
&lt;p&gt;We can take advantage of this to extract the estimated parameter value and the corresponding log-likelihood:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rate_fit_R$estimate
##      rate 
## 0.9705356
rate_fit_R$loglik
## [1] -25.74768&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, with &lt;code&gt;SciPy&lt;/code&gt; in &lt;code&gt;Python&lt;/code&gt; (using the same data):&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import scipy.stats as stats

sample_data = r.exp_samples

rate_fit_py = stats.expon.fit(data = sample_data, floc = 0)
rate = (rate_fit_py[1])**-1

print(rate)
## 0.9705355729681481&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though we did not specify MLE as a method, the &lt;a href=&#34;https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html&#34;&gt;online documentation&lt;/a&gt; indicates this is what the function uses.&lt;/p&gt;
&lt;p&gt;We can also calculate the log-likelihood associated with this estimate using &lt;code&gt;NumPy&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np

np.sum(np.log(stats.expon.pdf(x = sample_data, 
                              scale = rate_fit_py[1])))
## -25.747680569393435&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve shown that values obtained from &lt;code&gt;Python&lt;/code&gt; match those from &lt;code&gt;R&lt;/code&gt;, so (as usual) both approaches will work out.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; argument in &lt;code&gt;R&lt;/code&gt;’s &lt;code&gt;fitdistrplus::fitdist()&lt;/code&gt; function also accepts &lt;code&gt;mme&lt;/code&gt; (moment matching estimation) and &lt;code&gt;qme&lt;/code&gt; (quantile matching estimation), but remember that MLE is the default. One useful feature of MLE, is that (with sufficient data), parameter estimates can be approximated as normally distributed, with the covariance matrix (for all of the parameters being estimated) equal to the inverse of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hessian_matrix&#34;&gt;Hessian matrix&lt;/a&gt; of the likelihood function.&lt;/p&gt;
&lt;p&gt;However, MLE is primarily used as a point estimate solution and the information contained in a single value will always be limited. Likelihoods will not necessarily be symmetrically dispersed around the point of maximum likelihood. We may be interested in the full distribution of credible parameter values, so that we can perform sensitivity analyses and understand the possible outcomes or optimal decisions associated with particular credible intervals. See below for a proposed approach for overcoming these limitations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;limitations-how-to-do-better-wit-bayesian-methods&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Limitations (‘How to do better wit Bayesian methods’)&lt;/h3&gt;
&lt;p&gt;An intuitive method for quantifying this &lt;em&gt;epistemic&lt;/em&gt; (statistical) uncertainty in parameter estimation is Bayesian inference. This removes requirements for a sufficient sample size, while providing more information (a full &lt;em&gt;posterior&lt;/em&gt; distribution) of credible values for each parameter. If multiple parameters are being simultaneously estimated, then the posterior distribution will be a joint probabilistic model of all parameters, accounting for any inter-dependencies too. Finally, it also provides the opportunity to build in prior knowledge, which we may have available, before evaluating the data.&lt;/p&gt;
&lt;p&gt;Returning to the challenge of estimating the rate parameter for an exponential model, based on the same 25 observations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(exp_samples)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##  0.1061  0.4361  0.7552  1.0304  1.2296  4.4239&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will now consider a Bayesian approach, by writing a Stan file that describes this exponential model:&lt;/p&gt;
&lt;pre class=&#34;stan&#34;&gt;&lt;code&gt;data {

  int &amp;lt;lower = 0&amp;gt; N; // Defining the number of observations
  vector &amp;lt;lower = 0&amp;gt; [N] samples; // A vector containing the observations
  
}

parameters {
  
  // The (unobserved) model parameter that we want to estimate
  real &amp;lt;lower = 0&amp;gt; rate;

}

model {

  // An exponential model, which we are proposing to describe the data
  samples ~ exponential(rate);
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with &lt;a href=&#34;https://www.allyourbayes.com/post/bayesian-regression-models-with-stan/&#34;&gt;previous examples&lt;/a&gt; on this blog, data can be pre-processed, and results can be extracted using the &lt;code&gt;rstan&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rstan)

exp_posterior_samples &amp;lt;- sampling(object = exp_model,
                                  data = list(N = n_samples, 
                                              samples = exp_samples),
                                  seed = 1008)
## 
## SAMPLING FOR MODEL &amp;#39;5328d75314acb3313bc7fa418eeb08c2&amp;#39; NOW (CHAIN 1).
## Chain 1: 
## Chain 1: Gradient evaluation took 0 seconds
## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 1: Adjust your expectations accordingly!
## Chain 1: 
## Chain 1: 
## Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 1: 
## Chain 1:  Elapsed Time: 0.014 seconds (Warm-up)
## Chain 1:                0.012 seconds (Sampling)
## Chain 1:                0.026 seconds (Total)
## Chain 1: 
## 
## SAMPLING FOR MODEL &amp;#39;5328d75314acb3313bc7fa418eeb08c2&amp;#39; NOW (CHAIN 2).
## Chain 2: 
## Chain 2: Gradient evaluation took 0 seconds
## Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 2: Adjust your expectations accordingly!
## Chain 2: 
## Chain 2: 
## Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 2: 
## Chain 2:  Elapsed Time: 0.016 seconds (Warm-up)
## Chain 2:                0.014 seconds (Sampling)
## Chain 2:                0.03 seconds (Total)
## Chain 2: 
## 
## SAMPLING FOR MODEL &amp;#39;5328d75314acb3313bc7fa418eeb08c2&amp;#39; NOW (CHAIN 3).
## Chain 3: 
## Chain 3: Gradient evaluation took 0 seconds
## Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 3: Adjust your expectations accordingly!
## Chain 3: 
## Chain 3: 
## Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 3: 
## Chain 3:  Elapsed Time: 0.016 seconds (Warm-up)
## Chain 3:                0.02 seconds (Sampling)
## Chain 3:                0.036 seconds (Total)
## Chain 3: 
## 
## SAMPLING FOR MODEL &amp;#39;5328d75314acb3313bc7fa418eeb08c2&amp;#39; NOW (CHAIN 4).
## Chain 4: 
## Chain 4: Gradient evaluation took 0 seconds
## Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
## Chain 4: Adjust your expectations accordingly!
## Chain 4: 
## Chain 4: 
## Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup)
## Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)
## Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)
## Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)
## Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)
## Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)
## Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)
## Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)
## Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)
## Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)
## Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)
## Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling)
## Chain 4: 
## Chain 4:  Elapsed Time: 0.023 seconds (Warm-up)
## Chain 4:                0.023 seconds (Sampling)
## Chain 4:                0.046 seconds (Total)
## Chain 4:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We have not specified a prior model for the rate parameter. &lt;code&gt;Stan&lt;/code&gt; responds to this by setting what is known as an &lt;em&gt;improper&lt;/em&gt; prior (a uniform distribution bounded only by any upper and lower limits that were listed when the parameter was declared). For real-world problems, there are many reasons to avoid uniform priors. Partly because they are no longer ‘non-informative’ when there are transformations, such as in generalised linear models, and partly because there will always be some prior information to help direct you towards more credible outcomes. However, this data has been introduced without any context and by using uniform priors, we should be able to recover the same maximum likelihood estimate as the non-Bayesian approaches above.&lt;/p&gt;
&lt;p&gt;Extracting the results from our model:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggmcmc)

extracted_samples &amp;lt;- ggs(S = exp_posterior_samples)

head(x = extracted_samples, n = 5)
## # A tibble: 5 x 4
##   Iteration Chain Parameter value
##       &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;dbl&amp;gt;
## 1         1     1 rate      0.614
## 2         2     1 rate      0.710
## 3         3     1 rate      0.783
## 4         4     1 rate      1.00 
## 5         5     1 rate      1.16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use this data to visualise the uncertainty in our estimate of the rate parameter:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = extracted_samples %&amp;gt;% 
         dplyr::filter(Parameter == &amp;#39;rate&amp;#39;))+
  geom_density(mapping = aes(x = value, 
                             y = ..density..), 
               fill = &amp;#39;purple4&amp;#39;, alpha = 0.2)+
  geom_vline(aes(lty = &amp;#39;MLE solution&amp;#39;, 
                 xintercept = rate_fit_R$estimate))+
  scale_linetype_manual(values = c(2))+
  scale_x_continuous(name = &amp;#39;Rate Parameter&amp;#39;)+
  scale_y_continuous(name = &amp;#39;Posterior Likelihood&amp;#39;)+
  theme_ddf_light()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-28-maximum-likelihood-estimation_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can use the full posterior distribution to identify the maximum posterior likelihood (which matches the MLE value for this simple example, since we have used an improper prior). However, we can also calculate credible intervals, or the probability of the parameter exceeding any value that may be of interest to us.&lt;/p&gt;
&lt;p&gt;This distribution includes the statistical uncertainty due to the limited sample size. As more data is collected, we generally see a reduction in uncertainty. Based on a similar principle, if we had also have included some information in the form of a prior model (even if it was only weakly informative), this would also serve to reduce this uncertainty.&lt;/p&gt;
&lt;p&gt;Finally, we can also sample from the posterior distribution to plot predictions on a more meaningful outcome scale (where each green line represents an exponential model associated with a single sample from the posterior distribution of the rate parameter):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-28-maximum-likelihood-estimation_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
