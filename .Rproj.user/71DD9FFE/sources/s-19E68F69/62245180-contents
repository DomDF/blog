---
title: Animating Plots
author: ''
date: '2019-06-04'
slug: animating-plots
categories:
  - R
  - gganimate
tags:
  - R Markdown
  - Football
  - gganimate
  - ggplot2
  - R
subtitle: ''
summary: ''
authors: []
lastmod: '2019-06-04T15:01:07+01:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### TLDR

There are many instances where it may be useful to animate graphical representations of data, perhaps to add an additional dimension to a plot. However, the below is a purely gimmicky example that simply demonstrates some of the functionality of the [*gganimate*](https://cran.r-project.org/web/packages/gganimate) library.

---

### Making Moving Plots with *gganimate*

Graphics made using the ggplot2 package are already extremely customisable. They can be further enhanced using some of the [extensions that have been developed](http://ggplot2-exts.org/gallery/). These include providing access to new themes, as well as entirely new functionality.

*gganimate* allows for the animation of existing ggplot graphics. Once installed, we can load both packages (*ggplot2* is included as part of the *tidyverse*):

```{r, warning = FALSE, message = FALSE}
library(gganimate); library(tidyverse)
```


```{r, include = FALSE}
fifa19 <- as.data.frame(read.csv(file = 'C:/Users/domen/OneDrive/Documents/Kaggle/Football/fifa19data.csv', header = TRUE))

library(stringr)
numextract <- function(string){ 
  str_extract(string, "\\-*\\d+\\.*\\d*")
} 

for (i in seq(from = 1, to = nrow(fifa19), by = 1)){
  if(grepl(x = fifa19$Value[i], pattern = 'K')){
    fifa19$NumValue[i] <- as.numeric(numextract(fifa19$Value[i]))*10^-3
  } else {
    fifa19$NumValue[i] <- as.numeric(numextract(fifa19$Value[i]))
  }
}

fifa19$NumWage <- as.numeric(numextract(fifa19$Wage))

```

The example uses a fifa 19 dataset that I found on [Kaggle](https://www.kaggle.com/karangadiya/fifa19).

```{r, warning = FALSE, message = FALSE}
size <- 500
fifa19 <- fifa19 %>% arrange(desc(Overall))
topPlayers <- fifa19[1:size,]
```

The above filter defines the `topPlayers` dataframe as the highest rated `r size` players on the game.

However, it still has a lot of columns, and we are not interested in them all for now:

```{r, warning = FALSE, message = FALSE}
params <- c('Name', 'Overall', 'NumValue', 'NumWage')
topPlayers <- topPlayers %>% select(params)
```

Below shows how we can use ggplot to create a scatterplot comparing the transfer value and weekly wage of the players.

Because I want to label some of the most valuable and highest earning players I will use an additional ggplot extension, *ggrepel*. The function `geom_text_repel()` from this library differs from *ggplot*'s `geom_text()` in that it prevents text labels from overlapping with each other (where possible).

```{r, warning = FALSE, message = FALSE}
minValueToLabel <- 75; minWageToLabel <- 300

topPlayersPlot <- ggplot(topPlayers)+
   geom_point(aes(x = NumValue, y = NumWage), alpha = 0.5)+
   ggrepel::geom_text_repel(aes(x = NumValue, y = NumWage, label = Name), 
                   data = subset(topPlayers, NumValue > minValueToLabel | NumWage > minWageToLabel),
                   seed = 1008, size = 3, family = 'Trebuchet MS')+
   xlab('Player Value, $M')+ylab('Player Weekly Wage, $k')+
   theme_bw(base_size = 9)

topPlayersPlot

```

The text label effectively includes a filter by specifying a subset of data. Only players with a value of at least $`r minValueToLabel`
M, or a weekly wage of at least $`r minWageToLabel` k.

This plot is the basis for the animation.

Adding a function from *gganimate* and saving as a new variable:
```{r, warning = FALSE, message = FALSE}
topPlayersPlotAnim <- topPlayersPlot +
  transition_states(states = Overall, transition_length = 1, state_length = 4, wrap = FALSE)+
     ggtitle('Fifa 19 Top Rated Players', subtitle = 'Overall Rating = {closest_state}' )

```

`transition_states()` requires specification of the discrete states that the plot animate sequentially. As shown above, this animation will transition through values of `Overall` i.e. the overall player rating.

There are numerous alternative types of transition within *gganimate* as detailed [here](https://cran.r-project.org/web/packages/gganimate). Each of these accept some additional arguments to describe the animation. 

In this case, `transition_length` and `state_length` describe the **relative** amount of time spent displaying the current state, and transitioning to the next state. 

Finally, if `wrap` is set to `TRUE`, the animation will also transition from the final state back to the first state.

This example is certainly not exaustive and there are many additional tweaks available to further customise an animation. Some of those examples are shown in the official [beginner's guide](https://cran.r-project.org/web/packages/gganimate/vignettes/gganimate.html).

Regardless of the transition function selected, the best way to create the moving plot is to use the `animate` function:
```{r, eval = FALSE, warning = FALSE, message = FALSE}
animate(plot = topPlayersPlotAnim, fps = 20, duration = 60, end_pause = 60)
```

The `animate()` function requires us to specify the plot (to be animated), but includes many additional arguments not all of which are detailed above.

`fps` is the frames per second, `duration` is the length of the animation (in seconds), and `end_pause` is the length of time that the final frame is held for (in number of frames.)

I tried a few alternatives here, In this case each state has quite a few points and so I wanted it to be held for a reasonable amount of time. However, it does result in a total of 1200 frames in the animation. On my laptop this required approximately 3 minutes to render. A shorter animation could be produced in a few seconds.

![Final Animation](/fifa.gif)

Once you are happy with your animation you can save it (in various formats) using `anim_save()`.

**A note on animating text or label geoms from the *ggrepel* library**:

After my first attempt at this excercise my labels were jumping around erratically, though always in a similar position. As I found out on [stackoverflow](https://stackoverflow.com/questions/55723567/how-to-stop-ggrepel-labels-moving-between-gganimate-frames-in-r-ggplot2), this is because the position of the text was being assigned stochastically and was therefore being re-assigned in each frame.
Setting the seed value means the position will be the same in each frame. This is done in the `geom_text_repel()` function.