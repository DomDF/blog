library(tidyverse); library(extrafont)

ht <- function(x) {
  head(as_tibble(x)) 
}

LNs <- function(m,s) sqrt(log(1+s^2/m^2)); LNm <- function(m,s) log(m)-0.5*LNs(m,s)^2
Gscale <- function(s) s*sqrt(6)/pi; Glocation <- function(m,s) m-gamma*Gscale(s)

########################################################################################################
##                                                                                                    ##
##                                      Importing & Tidying Data                                      ##
##                                                                                                    ##    
########################################################################################################

setwd('~/PhD/Journals/Modelling Dependencies in Fatigue Assessment')

library(readxl)
All <- read_excel('C:/Users/domen/OneDrive/Documents/R/PDAC/Fatigue/FCGRds.xls')
All$dadN <- NA; All$Strength <- NA

for (i in seq(from = 1, to = nrow(All), by = 1)){
  
  if(!is.na(All$LowStrength[i]) & is.na(All$HighStrength[i])){
    All$dadN[i]<-All$LowStrength[i]; All$Strength[i]<-'Low Strength'
  }
  if (is.na(All$LowStrength[i]) & !is.na(All$HighStrength[i])) {
    All$dadN[i]<-All$HighStrength[i]; All$Strength[i]<-'High Strength'
  } 
  
  if(All$R[i]=='High'){All$R[i]<-'High R'}
  if(All$R[i]=='Low'){All$R[i]<-'Low R'}
  
}

# Manual Review ----

dS <- 9
dF <- All %>% dplyr::filter(Dataset==dS)
ggplot(dF)+
  geom_point(aes(x=log10(dK), y=log10(dadN)))


All$YS<-NA; All$YS.1<-NA; All$TS<-NA; All$TS.1<-NA; All$e<-NA; All$Rexact<-NA
All$f<-NA; All$Temp<-NA; All$Temp<-NA; All$sigmaS<-NA; All$CVN<-NA; All$Ref<-NA

#Dataset 1 - Reference 22
All$YS[All$Dataset==1]<-813; All$TS[All$Dataset==1]<-852; All$e[All$Dataset==1]<-0.32; All$Rexact[All$Dataset==1]<-0.1; 
All$f[All$Dataset==1]<-0.1; All$Ref[All$Dataset==1]<-22

#Dataset 5 - Reference 6
All$YS[All$Dataset==5]<-370; All$TS[All$Dataset==5]<-530; All$Rexact[All$Dataset==5]<-'< 0.06'; All$f[All$Dataset==5]<-0.167 
All$Ref[All$Dataset==5]<-6

#Dataset 9 - Reference 15
All$YS[All$Dataset==9]<-361; All$YS.1[All$Dataset==9]<-370; All$TS[All$Dataset==9]<-549; All$Rexact[All$Dataset==9]<-0.6 
All$e[All$Dataset==9]<-0.32; All$Ref[All$Dataset==9]<-15

#Dataset 15 - Reference 22
All$YS[All$Dataset==15]<-813; All$TS[All$Dataset==15]<-852; All$e[All$Dataset==15]<-0.32; All$Rexact[All$Dataset==15]<-0.8
All$f[All$Dataset==15]<-0.17; All$Ref[All$Dataset==15]<-22

#Dataset 20 - Reference 13
All$YS[All$Dataset==20]<-345; All$YS.1[All$Dataset==20]<-355; All$TS[All$Dataset==20]<-490; All$TS.1[All$Dataset==20]<-630 
All$Rexact[All$Dataset==20]<-'<0.1'; All$Ref[All$Dataset==20]<-13

#Dataset 28 - Reference 13.6
All$YS[All$Dataset==28]<-340; All$TS[All$Dataset==28]<-500; All$TS.1[All$Dataset==28]<-620; All$CP[All$Dataset==28]<--1000 
All$Rexact[All$Dataset==28]<-'<0.1'; All$Temp[All$Dataset==28]<-20; All$Ref[All$Dataset==28]<-13.6

#Dataset 29 - Reference 13.4
All$YS[All$Dataset==29]<-370; All$TS[All$Dataset==29]<-530; All$CP[All$Dataset==29]<-1100 ; All$f[All$Dataset==29]<-1
All$Ref[All$Dataset==29]<-13.4

#Dataset 30 - Reference 13.8
All$YS[All$Dataset==30]<-370; All$CP[All$Dataset==30]<--1100; All$f[All$Dataset==30]<-1  
All$sigmaS[All$Dataset==30]<-90; All$Ref[All$Dataset==30]<-13.4

#Dataset 31 - Reference 13.8
All$YS[All$Dataset==31]<-370; All$TS[All$Dataset==28]<-538; All$CP[All$Dataset==30]<--1100; All$Rexact[All$Dataset==30]<-'< 0.1'  
All$CVN[All$Dataset==31]<-119; All$e[All$Dataset==31]<-0.32; All$Ref[All$Dataset==30]<-13.4

#Dataset 53 - Reference 22
All$YS[All$Dataset==53]<-813; All$TS[All$Dataset==53]<-852; All$e[All$Dataset==53]<-0.32; All$Rexact[All$Dataset==53]<-0.8
All$f[All$Dataset==53]<-0.17; All$CP[All$Dataset==53]<--1000; All$Ref[All$Dataset==53]<-22

#Dataset 62 - Reference 6
All$YS[All$Dataset==62]<-370; All$TS[All$Dataset==62]<-530; All$f[All$Dataset==62]<-5; All$Ref[All$Dataset==62]<-6

#Dataset 63 - Reference 11
All$YS[All$Dataset==63]<-373; All$TS[All$Dataset==63]<-509; All$e[All$Dataset==63]<-0.36; All$Ref[All$Dataset==63]<-11


# Categorisation & Plotting ----

FC <- All %>% dplyr::filter(All$Environment=='Free Corrosion')
CP <- All %>% dplyr::filter(All$Environment=='CP -850mV'); HighCP <- All %>% dplyr::filter(All$Environment=='CP -1050mV')
Air <- All %>% dplyr::filter(All$Environment=='Air')

FC.LowR <- FC %>% dplyr::filter(R=='Low R'); FC.HighR <- FC %>% dplyr::filter(R=='High R')

FC.HighR$TestID <- paste('Test', FC.HighR$Dataset - 7) %>% factor( levels = c('Test 1','Test 2', 'Test 3', 'Test 4', 'Test 5', 'Test 6',
                                                                          'Test 7','Test 8', 'Test 9', 'Test 10', 'Test 11'))
ggplot(data = FC.HighR)+
  geom_point(aes(x = log10(dK), y = log10(dadN), shape = as.factor(Strength)), size = 1)+
  facet_wrap(facets = ~ TestID, nrow = 3, scales = 'fixed')+ #scale_colour_manual(values = c('firebrick', 'forestgreen'))+
  scale_shape_manual(values = c(1, 2))+
  scale_x_continuous(name = expression(Log[10](Delta*K, N/mm^{3/2}))) + 
  scale_y_continuous(name = expression(Log[10](da/dN, mm/cycle)))+
  theme_bw(base_family = 'Trebuchet MS') + 
  theme(legend.title = element_blank(), legend.position = 'top')


########################################################################################################
##                                                                                                    ##
##                                  Bayes: Fitting Models (MCMC)                                      ##
##                                                                                                    ##    
########################################################################################################

library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores=parallel::detectCores())

Air.LowR <- Air %>% dplyr::filter(R == 'Low R'); Air.HighR <- Air %>% dplyr::filter(R == 'High R')

# Stan Model Data Lists
dK_bar <- mean(log10(FC.HighR$dK)); dadN_bar <- mean(log10(FC.HighR$dadN))
dataFCHighR <- list(N = nrow(FC.HighR), logdadN = log10(FC.HighR$dadN) - dadN_bar, 
                    logdK = log10(FC.HighR$dK)- dK_bar, dK_bar = dK_bar)

# Multi-Level Stan Model Data Lists
dataFCHighR_ML <- list(N = nrow(FC.HighR), logdadN = log10(FC.HighR$dadN) - mean(log10(FC.HighR$dadN)), 
                       logdK = log10(FC.HighR$dK)- mean(log10(FC.HighR$dK)),
                       TD = length(unique(FC.HighR$Dataset)), test = FC.HighR$Dataset - (min(FC.HighR$Dataset) - 1))


nChains <- parallel::detectCores(); burnIn <- 1e4; N <- burnIn + 1e4; thinning <- 1
  
biLinfit.FCHighR <- stan(file = 'R/Stan/FCGR.stan', data = dataFCHighR, chains = nChains, thin = thinning, iter = N, warmup = burnIn, seed = 1008, 
                         control = list(adapt_delta = 0.99, max_treedepth = 15))

biLinfit.FCHighR_ML <- stan(file = 'R/Stan/FCGR_h.stan', data = dataFCHighR_ML, chains = nChains, thin = thinning, iter = N, warmup = burnIn, seed = 1008,
                            control = list(adapt_delta = 0.99, max_treedepth = 15))

linFit.FCHighR <- stan(file = 'R/Stan/FCGR_linear.stan', data = dataFCHighR, chains = nChains, thin = thinning, iter = N, warmup = burnIn, seed = 1008,
                        control = list(adapt_delta = 0.99, max_treedepth = 15))

linFit.FCHighR_ML <- stan(file = 'R/Stan/FCGR_linear_h.stan', data = dataFCHighR_ML, chains = nChains, thin = thinning, iter = N, warmup = burnIn, seed = 1008,
                           control = list(adapt_delta = 0.99))

# Independent Models ----

biLinfit.FCHighR_ind <- stan(file = 'R/Stan/FCGR_ind_2.stan', data = dataFCHighR_ML, chains = nChains, thin = thinning, iter = N, warmup = burnIn, seed = 1008,
                            control = list(adapt_delta = 0.999, max_treedepth = 15))

# Air Models ----

biLinFit.AirHighR <- stan(file = 'R/Stan/FCGR.stan', data = dataAirHighR, chains = nChains, thin = 1, 
                           seed = 1008, warmup = burnIn, iter = N, control = list(adapt_delta = 0.99))
linFit.AirHighR <- stan(file = 'R/Stan/FCGR_linear.stan', data = dataAirHighR, chains = nChains, thin = 1, 
                          seed = 1008, warmup = burnIn, iter = N, control = list(adapt_delta = 0.99))

# saveRDS(object = biLinfit.FCHighR, file = 'biLin_norm_np.rds')
# saveRDS(object = biLinfit.FCHighR_ML, file = 'biLin_MLM_norm_np.rds')
# saveRDS(object = biLinfit.FCHighR_ind, file = 'biLin_ind_norm_np.rds')
# saveRDS(object = linFit.FCHighR, file = 'lin_norm_np.rds')
# saveRDS(object = linFit.FCHighR_ML, file = 'lin_MLM_norm_np.rds')

# biLinfit.FCHighR <- readRDS('Results/StanFit Objects/biLin_norm_np.rds')
# biLinfit.FCHighR_ML <- readRDS('Results/StanFit Objects/biLin_MLM_norm_np.rds')

# Data Extraction ----

# fitFCGR.FCHighR <- readRDS(file = 'C:/Users/domen/OneDrive/Documents/PhD/Journals/Modelling Dependencies in Fatigue Assessment/R/stanModel_10000.rds')
modelPars <- c('d_Ktr', 'A.1', 'A.2', 'm.1', 'm.2', 'sigma')
modelDf <- as.data.frame(rstan::extract(object = biLinfit.FCHighR)) %>% dplyr::select(modelPars)

modelPars_ML <- c('Kth', 'sigma', 'A.1', 'A.2', 'm.1', 'm.2')
modelDf_ML <- as.data.frame(rstan::extract(object = biLinfit.FCHighR_ML)) %>% dplyr::select(modelPars_ML)

write.csv(x = mcmcDf, file = 'mcmcDf.csv'); write.csv(x = modelDf, 'modelDf.csv')
# modelDf <- read.csv(file = 'C:/Users/domen/Desktop/Journals/Modelling Dependencies in Fatigue Assessment/Results/modelDf.csv')
# mcmcDf <- read.csv(file = 'C:/Users/domen/Desktop/Journals/Modelling Dependencies in Fatigue Assessment/Results/mcmcDf.csv')

modelDf$Kth <- as.numeric(modelDf$Kth)
pairsDfReduced <- modelDf[seq(from = 1, to = nrow(modelDf), by = 25),]

pairsPlot <- GGally::ggpairs(pairsDfReduced %>% dplyr::select('d_Ktr', 'A.1', 'A.2', 'm.1', 'm.2', 'sigma'),
                upper = list(continuous = wrap('cor', size = 3)),
                lower = list(continuous = wrap('points', shape = 1, size = 0.5, alpha = 0.1)))+
#  ggthemes::theme_base(base_size = 14, base_family = 'Trebuchet MS')
  theme_bw(base_size = 10, base_family = 'Trebuchet MS')

library(ggforce)

pairsPlot <- ggplot(data = pairsDfReduced %>% dplyr::select('d_Ktr', 'A.1', 'A.2', 'm.1', 'm.2', 'sigma'), 
                    aes(x = .panel_x, y = .panel_y))+
  geom_point(shape = 1, size = 0.1, col = 'grey20') + 
  geom_autodensity(col = 'black', fill = 'grey80')+
  geom_density2d(col = 'grey20', bins = 10) +
  facet_matrix(vars(everything()), layer.diag = 2, layer.upper = 3, 
               grid.y.diag = FALSE)+
  ggthemes::theme_base(base_size = 14, base_family = 'Trebuchet MS')+
  theme(axis.text.x = element_text(angle = 45), rect = element_blank())
                             


# Model Plotting ----

# Plotting Fully Pooled Model ----

pMainPooled <- ggplot(FC.HighR)+
  geom_point(aes(x = log10(dK), y = log10(dadN), shape = Strength), col = 'black', alpha = 0.75)+
  scale_shape_manual(values = c(1, 2))+
  scale_x_continuous(name = expression(Log[10](Delta*K, N/mm^{3/2})))+
  scale_y_continuous(name = expression(Log[10](da/dN)))+
  ggthemes::theme_base(base_family = 'Trebuchet MS') + 
#  theme_bw(base_family = 'Trebuchet MS', base_size = 8)+
  theme(legend.title = element_blank(), legend.position = 'top', rect = element_blank())

credIntDf <- ggmcmc::ggs(S = biLinfit.FCHighR) %>% dplyr::filter(grepl(pattern = 'dadNpp', x = Parameter))
quantDf <- data.frame(dataPoint = seq(from = 1, to = length(unique(credIntDf$Parameter)), by = 1), 
                      lower =  rep(x = 0, times = length(unique(credIntDf$Parameter))), 
                      higher = rep(x = 0, times = length(unique(credIntDf$Parameter))))

credIntDf_MLM <- ggmcmc::ggs(S = biLinfit.FCHighR_ML) %>% dplyr::filter(grepl(pattern = 'dadNpp', x = Parameter))
quantDf_MLM <- data.frame(dataPoint = seq(from = 1, to = length(unique(credIntDf_MLM$Parameter)), by = 1), 
                      lower =  rep(x = 0, times = length(unique(credIntDf_MLM$Parameter))), 
                      higher = rep(x = 0, times = length(unique(credIntDf_MLM$Parameter))))


quantDf$dK <- FC.HighR$dK; quantDf$dadN <- FC.HighR$dadN; quantDf$Strength <- FC.HighR$Strength
quantDf_MLM$dK <- FC.HighR$dK; quantDf_MLM$dadN <- FC.HighR$dadN; quantDf_MLM$Strength <- FC.HighR$Strength

interval <- 0.95

for (i in seq(from = 1, to = length(unique(credIntDf$Parameter)), by = 1)){
  
  quantDf$lower[i] <- quantile(x = credIntDf$value[credIntDf$Parameter == unique(credIntDf$Parameter)[i]], probs = (1 - interval) / 2)
  quantDf$higher[i] <- quantile(x = credIntDf$value[credIntDf$Parameter == unique(credIntDf$Parameter)[i]], probs = (1 - (1 - interval) / 2))
  
  quantDf_MLM$lower[i] <- quantile(x = credIntDf_MLM$value[credIntDf_MLM$Parameter == unique(credIntDf_MLM$Parameter)[i]], probs = (1 - interval) / 2)
  quantDf_MLM$higher[i] <- quantile(x = credIntDf_MLM$value[credIntDf_MLM$Parameter == unique(credIntDf_MLM$Parameter)[i]], probs = (1 - (1 - interval) / 2))
   
}

quantDf_MLM <- quantDf_MLM %>% dplyr::arrange(dK)

for (i in seq(from = 2, to = nrow(quantDf_MLM), by = 1)){
  
  if(quantDf_MLM$lower[i] < quantDf_MLM$lower[i-1]){
    quantDf_MLM$lower[i] <- quantDf_MLM$lower[i-1]
  } else {
    quantDf_MLM$lower[i] <- quantDf_MLM$lower[i]
  }
}

quantDf$model <- ' 95% CI: Fully Pooled Model '; quantDf_MLM$model <- ' 95% CI: Multi-Level Model '

quantDf_comb <- rbind(quantDf, quantDf_MLM)
# saveRDS(object = quantDf_comb, file = 'quantDf_comb.rds') # Includes un-normalised values

bs7910_models <- as.data.frame(readxl::read_excel(path = 'bs7910.xlsx'))
bs7910_model <- bs7910_models %>% 
  dplyr::filter(Curve == 'UB') %>% 
  dplyr::filter(R == 'High')

xA_start <- log10(min(FC.HighR$dK)); xA_end <- log10((bs7910_model %>% dplyr::filter(Stage == 1))$dKTH); 
yA_start <- log10((bs7910_model %>% dplyr::filter(Stage == 1))$A *(10^xA_start) ^ (bs7910_model %>% dplyr::filter(Stage == 1))$m)
yA_end <- log10((bs7910_model %>% dplyr::filter(Stage == 1))$A * (10^xA_end) ^ (bs7910_model %>% dplyr::filter(Stage == 1))$m)

xB_start <- xA_end; xB_end <- log10(max(FC.HighR$dK))
yB_start <- log10((bs7910_model %>% dplyr::filter(Stage == 2))$A * (10^xB_start) ^ (bs7910_model %>% dplyr::filter(Stage == 2))$m)
yB_end <- log10((bs7910_model %>% dplyr::filter(Stage == 2))$A * (10^xB_end) ^ (bs7910_model %>% dplyr::filter(Stage == 2))$m)

quantDf_comb <- readRDS('quantDf_comb.rds') 
quantDf_comb$model <- quantDf_comb$model %>% sub(pattern = 'Multi-Level', replacement = 'Partial Pooling')

ggplot(quantDf_comb)+
  geom_line(aes(x = log10(dK), y = lower_un, linetype = model), col = 'grey50')+
  geom_line(aes(x = log10(dK), y = higher_un, linetype = model), col = 'grey50')+
  #geom_segment(data = NULL, mapping = aes(x = xA_start, xend =  xA_end, y = yA_start, yend = yA_end, col = 'BS7910 Upper Bound'))+
  #geom_segment(data = NULL, mapping = aes(x = xB_start, xend =  xB_end, y = yB_start, yend = yB_end, col = 'BS7910 Upper Bound'))+
  #scale_colour_viridis_d()+
  scale_color_manual(values = c('darkred'))+
  geom_point(aes(x = log10(dK), y = log10(dadN), shape = Strength))+
  scale_shape_manual(values = c(1, 2)) + scale_linetype_manual(values = c(2, 1))+
  #theme_bw(base_size = 12, base_family = 'Trebuchet MS') + 
  ggthemes::theme_base(base_family = 'Trebuchet MS', base_size = 14)+
  labs(linetype = element_blank(), col = element_blank(), shape = element_blank()) +
  scale_x_continuous(name = expression(Log[10](Delta*K, N/mm^{3/2})))+
  scale_y_continuous(name = expression(Log[10](da/dN)))+
  theme(legend.position = 'top', rect = element_blank(), legend.text = element_text(size = 10))+
  guides(linetype = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) 

ggplot(quantDf_comb)+
  geom_line(aes(x = log10(dK) - mean(log10(FC.HighR$dK)), y = lower, linetype = model), col = 'grey50')+
  geom_line(aes(x = log10(dK) - mean(log10(FC.HighR$dK)), y = higher, linetype = model), col = 'grey50')+
  geom_point(aes(x = log10(dK) - mean(log10(FC.HighR$dK)), y = log10(dadN) - mean(log10(FC.HighR$dadN)), shape = Strength))+
  scale_shape_manual(values = c(1, 2)) + scale_linetype_manual(values = c(2, 1))+
  #theme_bw(base_size = 12, base_family = 'Trebuchet MS') + 
  ggthemes::theme_base(base_family = 'Trebuchet MS')+
  labs(linetype = element_blank(), shape = element_blank()) +
  scale_x_continuous(name = expression(Normalised~Log[10](Delta*K, N/mm^{3/2})))+
  scale_y_continuous(name = expression(Normalised~Log[10](da/dN)))+
  theme(legend.position = 'top', rect = element_blank())

pars <- c('A[1]', 'A[2]', 'm[1]', 'm[2]', 'd_Ktr', 'sigma')
extractPooled <- as.data.frame(rstan::extract(object = biLinfit.FCHighR, pars = pars))
redExtractPooled <- extractPooled[seq(from = 1, to = nrow(extractPooled), length.out = 10^3),]

redExtractPooled$xs1 <- min(log10(FC.HighR$dK))
redExtractPooled$ys1 <- redExtractPooled$A.1. + redExtractPooled$m.1. * (redExtractPooled$xs1) + dadN_bar
redExtractPooled$xe1 <- log10(redExtractPooled$d_Ktr)
redExtractPooled$ye1 <- redExtractPooled$A.1. + redExtractPooled$m.1. * (redExtractPooled$xe1) + dadN_bar

redExtractPooled$xs2 <- log10(redExtractPooled$d_Ktr)
redExtractPooled$ys2 <- redExtractPooled$ye1
redExtractPooled$xe2 <- max(log10(FC.HighR$dK))
redExtractPooled$ye2 <- redExtractPooled$A.2. + redExtractPooled$m.2. * (redExtractPooled$xe2) + dadN_bar

for (i in seq(from = 1, to = nrow(redExtractPooled), by = 1)){
  
  redExtractPooled$ys1_s[i] <- redExtractPooled$ys1[i] + rnorm(n = 1, mean = 0, sd = redExtractPooled$sigma[i]) 
  redExtractPooled$ye1_s[i] <- redExtractPooled$ye1[i] + rnorm(n = 1, mean = 0, sd = redExtractPooled$sigma[i])
  redExtractPooled$ye2_s[i] <- max(redExtractPooled$ye1_s[i], 
                                   redExtractPooled$ye2[i] + rnorm(n = 1, mean = 0, sd = redExtractPooled$sigma[i]))
  
}
redExtractPooled$ys2 <- redExtractPooled$ye1_s

pNewPooled <- pMainPooled

pNewPooled <- pNewPooled + 
  geom_segment(mapping = aes(x = redExtractPooled$xs1, y = redExtractPooled$ys1_s, xend = redExtractPooled$xe1, yend = redExtractPooled$ye1_s), 
               data = redExtractPooled, alpha = 0.05, size = 0.1, col = 'forestgreen')+
  geom_segment(mapping = aes(x = redExtractPooled$xs2, y = redExtractPooled$ys2, xend = redExtractPooled$xe2, yend = redExtractPooled$ye2_s), 
               data = redExtractPooled, alpha = 0.05, size = 0.1, col = 'forestgreen')#+
#  geom_ribbon(aes(x = log10(dK), ymin = lower, ymax = higher, linetype = ' 95% Credible Intervals '), alpha = 0.1, data = quantDf, col = 'black')+
#  scale_linetype_manual(values = c(2)) +
#  labs(caption = 'Fully Pooled Piecewise Bayesian Regression Model')

pMainPooled +
  geom_ribbon(aes(x = log10(dK), ymin = lower, ymax = higher, linetype = ' 95% Credible Intervals '), alpha = 0.1, data = quantDf, col = 'black')+
#  geom_line(aes(x = log10(dK), y = higher, linetype = ' 95% Bayesian Credible Intervals '), data = quantDf)+
#  geom_line(aes(x = log10(dK), y = lower, linetype = ' 95% Bayesian MLM Credible Intervals '), data = quantDf_MLM)+
#  geom_line(aes(x = log10(dK), y = higher, linetype = ' 95% Bayesian MLM Credible Intervals '), data = quantDf_MLM)+
  scale_linetype_manual(values = c(2))
  
# Shrinkage ----

het_alpha <- ggmcmc::ggs(S = biLinfit.FCHighR) %>% dplyr::filter(grepl(pattern = 'alpha', x = Parameter))
ind_alpha <- ggmcmc::ggs(S = biLinfit.FCHighR_ind) %>% dplyr::filter(grepl(pattern = 'alpha', x = Parameter)) %>% 
  dplyr::filter(!grepl(pattern = 'mu|sigma', x = Parameter))
mlm_alpha <- ggmcmc::ggs(S = biLinfit.FCHighR_ML) %>% dplyr::filter(grepl(pattern = 'alpha', x = Parameter)) %>% 
  dplyr::filter(!grepl(pattern = 'mu|sigma|pp', x = Parameter))

het_alpha$model <- ' Fully Pooled Model '; ind_alpha$model <- ' Independent Model '; mlm_alpha$model <- ' Multi-Level Model '

alphas <- rbind(het_alpha, ind_alpha, mlm_alpha)

alphas$Parameter <- alphas$Parameter %>% gsub(pattern = 'alpha', replacement = ' A1 ')

library(ggridges)
ggplot(alphas)+
  geom_density_ridges(mapping = aes(y = as.factor(Parameter), x = value, alpha = model), 
                      scale = 0.8, fill = 'grey20', col = 'grey40')+
  scale_x_continuous(limits = c(-0.6, 0.6))+
  theme_bw(base_size = 12, base_family = 'Trebuchet MS')+
  theme(legend.position = 'top')+
  labs(x = 'Posterior Value', y = element_blank(), alpha = element_blank())+
  scale_alpha_manual(values = c(0.9, 0.6, 0.1))


# Plotting Hierarchical Model ----

extract_ML <- as.data.frame(rstan::extract(object = biLinfit.FCHighR_ML)); selCols <- grep('alpha.|beta.|gamma.|logKth', names(extract_ML), value=TRUE)
selExtract_ML <- extract_ML %>% dplyr::select(selCols)
redExtract_ML <- selExtract_ML[seq(from = 1, to = nrow(selExtract_ML), length.out = 1e3),]

newDf <- data.frame(alpha = c(redExtract_ML$alpha.1, redExtract_ML$alpha.2, redExtract_ML$alpha.3, redExtract_ML$alpha.4, redExtract_ML$alpha.5, redExtract_ML$alpha.6, 
                                  redExtract_ML$alpha.7, redExtract_ML$alpha.8, redExtract_ML$alpha.9, redExtract_ML$alpha.10, redExtract_ML$alpha.11),
                    beta = c(redExtract_ML$beta.1, redExtract_ML$beta.2, redExtract_ML$beta.3, redExtract_ML$beta.4, redExtract_ML$beta.5, redExtract_ML$beta.6, 
                                 redExtract_ML$beta.7, redExtract_ML$beta.8, redExtract_ML$beta.9, redExtract_ML$beta.10, redExtract_ML$beta.11),
                    gamma = c(redExtract_ML$gamma.1, redExtract_ML$gamma.2, redExtract_ML$gamma.3, redExtract_ML$gamma.4, redExtract_ML$gamma.5, redExtract_ML$gamma.6, 
                                  redExtract_ML$gamma.7, redExtract_ML$gamma.8, redExtract_ML$gamma.9, redExtract_ML$gamma.10, redExtract_ML$gamma.11),
                    logKth = c(redExtract_ML$logKth.1, redExtract_ML$logKth.2, redExtract_ML$logKth.3, redExtract_ML$logKth.4, redExtract_ML$logKth.5, redExtract_ML$logKth.6, 
                            redExtract_ML$logKth.7, redExtract_ML$logKth.8, redExtract_ML$logKth.9, redExtract_ML$logKth.10, redExtract_ML$logKth.11),
                    TestID <- c(rep(x = 'Test 1', times = nrow(redExtract_ML)), rep(x = 'Test 2', times = nrow(redExtract_ML)), rep(x = 'Test 3', times = nrow(redExtract_ML)),
                                rep(x = 'Test 4', times = nrow(redExtract_ML)), rep(x = 'Test 5', times = nrow(redExtract_ML)), rep(x = 'Test 6', times = nrow(redExtract_ML)),
                                rep(x = 'Test 7', times = nrow(redExtract_ML)), rep(x = 'Test 8', times = nrow(redExtract_ML)), rep(x = 'Test 9', times = nrow(redExtract_ML)),
                                rep(x = 'Test 10', times = nrow(redExtract_ML)), rep(x = 'Test 11', times = nrow(redExtract_ML))))
colnames(newDf) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')

newDf <- newDf[seq(from = 1, to = nrow(newDf), length.out = 1000),]

pMain_ML <- ggplot(FC.HighR)+
  geom_point(aes(x = log10(dK) - mean(log10(dK)), y = log10(dadN) - mean(log10(dadN)), shape = Strength), col = 'black', alpha = 0.75)+
  #facet_wrap(facets = ~ TestID, scales = 'fixed', ncol = 4)+
  scale_shape_manual(values = c(1, 2))+
  scale_y_continuous(name = expression(Normalised~Log[10] (da/dN, mm/cycle)))+
  scale_x_continuous(name = expression(Normalised~Log[10](Delta*K, N/mm^{3/2})))+
  theme_bw(base_family = 'Trebuchet MS', base_size = 12)+
  theme(legend.title = element_blank())+theme(legend.position = 'top')

newDf$xs1 <- min(log10(FC.HighR$dK) - dK_bar)
newDf$ys1 <- newDf$alpha + newDf$beta * (newDf$xs1)
newDf$xe1 <- newDf$logKth
newDf$ye1 <- newDf$alpha + newDf$beta * (newDf$xe1)

newDf$xs2 <- newDf$logKth
newDf$ys2 <- newDf$alpha + newDf$beta * (newDf$xe1)
newDf$xe2 <- max(log10(FC.HighR$dK) - dK_bar)
newDf$ye2 <- newDf$alpha + newDf$beta * newDf$xe2 + newDf$gamma * (newDf$xe2 - newDf$xe1)

pNew_ML <- pMain_ML

pNew_ML <- pNew_ML + 
  geom_segment(mapping = aes(x = newDf$xs1, y = newDf$ys1, xend = newDf$xe1, yend = newDf$ye1), data = newDf, alpha = 0.025, size = 0.1, col = 'forestgreen')+
  geom_segment(mapping = aes(x = newDf$xs2, y = newDf$ys2, xend = newDf$xe2, yend = newDf$ye2), data = newDf, alpha = 0.025, size = 0.1, col = 'forestgreen')+
  facet_wrap(facets = ~ TestID, scales = 'fixed', ncol = 4)# + labs(caption = 'Multi-Level (Partial Pooling) Piecewise Bayesian Regression Model')
pNew_ML

####


# Plotting Independent Model ----

extract_ind_all <- as.data.frame(rstan::extract(object = biLinfit.FCHighR_ind, pars = c('alpha', 'beta', 'gamma', 'logKth')))
extract_ind_1 <- extract_ind_all[,c(1, 12, 23, 34)]; extract_ind_1$TestID <- 'Test 1'; colnames(extract_ind_1) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_2 <- extract_ind_all[,c(2, 13, 24, 35)]; extract_ind_2$TestID <- 'Test 2'; colnames(extract_ind_2) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_3 <- extract_ind_all[,c(3, 14, 25, 36)]; extract_ind_3$TestID <- 'Test 3'; colnames(extract_ind_3) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_4 <- extract_ind_all[,c(4, 15, 26, 37)]; extract_ind_4$TestID <- 'Test 4'; colnames(extract_ind_4) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_5 <- extract_ind_all[,c(5, 16, 27, 38)]; extract_ind_5$TestID <- 'Test 5'; colnames(extract_ind_5) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_6 <- extract_ind_all[,c(6, 17, 28, 39)]; extract_ind_6$TestID <- 'Test 6'; colnames(extract_ind_6) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_7 <- extract_ind_all[,c(7, 18, 29, 40)]; extract_ind_7$TestID <- 'Test 7'; colnames(extract_ind_7) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_8 <- extract_ind_all[,c(8, 19, 30, 41)]; extract_ind_8$TestID <- 'Test 8'; colnames(extract_ind_8) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_9 <- extract_ind_all[,c(9, 20, 31, 42)]; extract_ind_9$TestID <- 'Test 9'; colnames(extract_ind_9) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_10 <- extract_ind_all[,c(10, 21, 32, 43)]; extract_ind_10$TestID <- 'Test 10'; colnames(extract_ind_10) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')
extract_ind_11 <- extract_ind_all[,c(11, 22, 33, 44)]; extract_ind_11$TestID <- 'Test 11'; colnames(extract_ind_11) <- c('alpha', 'beta', 'gamma', 'logKth', 'TestID')

extract_ind <- rbind(extract_ind_1, extract_ind_2, extract_ind_3, extract_ind_4, extract_ind_5, extract_ind_6,
                     extract_ind_7, extract_ind_8, extract_ind_9, extract_ind_10, extract_ind_11)

redExtract_ind <- extract_ind[seq(from = 1, to = nrow(extract_ind), length.out = 1000),]
redExtract_ind$TestID <-  factor(x = redExtract_ind$TestID, levels = c('Test 1','Test 2', 'Test 3', 'Test 4', 'Test 5', 'Test 6',
                                                                       'Test 7','Test 8', 'Test 9', 'Test 10', 'Test 11'))

redExtract_ind$xs1 <- min(log10(FC.HighR$dK) - dK_bar)
redExtract_ind$ys1 <- redExtract_ind$alpha + redExtract_ind$beta * redExtract_ind$xs1
redExtract_ind$xe1 <- redExtract_ind$logKth
redExtract_ind$ye1 <- redExtract_ind$alpha + redExtract_ind$beta * redExtract_ind$xe1

redExtract_ind$xs2 <- redExtract_ind$logKth
redExtract_ind$ys2 <- redExtract_ind$alpha + redExtract_ind$beta * redExtract_ind$xe1
redExtract_ind$xe2 <- max(log10(FC.HighR$dK) - dK_bar)
redExtract_ind$ye2 <- redExtract_ind$alpha + redExtract_ind$beta * redExtract_ind$xe2 + redExtract_ind$gamma * (redExtract_ind$xe2 - redExtract_ind$xe1)

pooled <- as.data.frame(rstan::extract(object = biLinfit.FCHighR, pars = c('alpha', 'beta', 'gamma', 'logKtr')))

p_alpha <- mean(pooled$alpha); p_beta <- mean(pooled$beta); p_gamma <- mean(pooled$gamma); p_logKtr <- mean(pooled$logKtr)

p_xs1 <- min(log10(FC.HighR$dK) - dK_bar)
p_ys1 <- p_alpha + p_beta * p_xs1
p_xe1 <- p_logKtr
p_ye1 <- p_alpha + p_beta * p_xe1

p_xs2 <- p_logKtr
p_ys2 <- p_alpha + p_beta * p_xe1
p_xe2 <- max(log10(FC.HighR$dK) - dK_bar)
p_ye2 <- p_alpha + p_beta * p_xe2 + p_gamma * (p_xe2 - p_xe1)


MLM_means <- data.frame(xs1 = rep(x = mean(newDf$xs1), times = length(unique(newDf$TestID))),
                          ys1 = NA, xe1 = NA, ye1 = NA, xs2 = NA, ys2 = NA, ye2 = NA,
                          xe2 = rep(x = mean(newDf$xe2), times = length(unique(newDf$TestID))),
                          TestID = unique(newDf$TestID))

for (i in seq(from = 1, to = length(unique(newDf$TestID)), by = 1)){
  
  MLM_means$ys1[i] <- mean(x = ((newDf %>% dplyr::filter(TestID == (unique(newDf$TestID))[i]))$ys1))
  MLM_means$xe1[i] <- mean(x = ((newDf %>% dplyr::filter(TestID == (unique(newDf$TestID))[i]))$xe1))
  MLM_means$ye1[i] <- mean(x = ((newDf %>% dplyr::filter(TestID == (unique(newDf$TestID))[i]))$ye1))
  MLM_means$xs2[i] <- mean(x = ((newDf %>% dplyr::filter(TestID == (unique(newDf$TestID))[i]))$xs2))
  MLM_means$ys2[i] <- mean(x = ((newDf %>% dplyr::filter(TestID == (unique(newDf$TestID))[i]))$ys2))
  MLM_means$ye2[i] <- mean(x = ((newDf %>% dplyr::filter(TestID == (unique(newDf$TestID))[i]))$ye2))
  
}

ind_means <- data.frame(xs1 = rep(x = mean(redExtract_ind$xs1), times = length(unique(redExtract_ind$TestID))),
                        ys1 = NA, xe1 = NA, ye1 = NA, xs2 = NA, ys2 = NA, ye2 = NA,
                        xe2 = rep(x = mean(redExtract_ind$xe2), times = length(unique(redExtract_ind$TestID))),
                        TestID = unique(redExtract_ind$TestID))

for (i in seq(from = 1, to = length(unique(redExtract_ind$TestID)), by = 1)){
  
  ind_means$ys1[i] <- mean(x = ((redExtract_ind %>% dplyr::filter(TestID == (unique(redExtract_ind$TestID))[i]))$ys1))
  ind_means$xe1[i] <- mean(x = ((redExtract_ind %>% dplyr::filter(TestID == (unique(redExtract_ind$TestID))[i]))$xe1))
  ind_means$ye1[i] <- mean(x = ((redExtract_ind %>% dplyr::filter(TestID == (unique(redExtract_ind$TestID))[i]))$ye1))
  ind_means$xs2[i] <- mean(x = ((redExtract_ind %>% dplyr::filter(TestID == (unique(redExtract_ind$TestID))[i]))$xs2))
  ind_means$ys2[i] <- mean(x = ((redExtract_ind %>% dplyr::filter(TestID == (unique(redExtract_ind$TestID))[i]))$ys2))
  ind_means$ye2[i] <- mean(x = ((redExtract_ind %>% dplyr::filter(TestID == (unique(redExtract_ind$TestID))[i]))$ye2))
  
}

pNew <- pMain_ML

pNew <- pNew +
  geom_segment(mapping = aes(x = p_xs1, y = p_ys1, xend = p_xe1, yend = p_ye1, linetype = 'Fully Pooled\nModel'), 
               size = 0.5, alpha = 0.6)+
  geom_segment(mapping = aes(x = p_xs2, y = p_ys2, xend = p_xe2, yend = p_ye2, linetype = 'Fully Pooled\nModel'), 
               size = 0.5, alpha = 0.6)+
  geom_segment(mapping = aes(x = ind_means$xs1, y = ind_means$ys1, xend = ind_means$xe1, yend = ind_means$ye1, linetype = 'Independent\nModel'), 
               data = ind_means, size = 0.5, alpha = 0.6)+
  geom_segment(mapping = aes(x = ind_means$xs2, y = ind_means$ys2, xend = ind_means$xe2, yend = ind_means$ye2, linetype = 'Independent\nModel'), 
               data = ind_means, size = 0.5, alpha = 0.6)+
  geom_segment(mapping = aes(x = MLM_means$xs1, y = MLM_means$ys1, xend = MLM_means$xe1, yend = MLM_means$ye1, linetype = 'Multi-Level\nModel'), 
               data = MLM_means, size = 0.5, alpha = 0.6)+
  geom_segment(mapping = aes(x = MLM_means$xs2, y = MLM_means$ys2, xend = MLM_means$xe2, yend = MLM_means$ye2, linetype = 'Multi-Level\nModel'), 
               data = MLM_means, size = 0.5, alpha = 0.6)+
#  scale_color_manual(values = c('grey25', 'firebrick', 'forestgreen'))+
  scale_linetype_manual(values = c(1, 2, 3))+
  #scale_y_continuous(breaks = NULL)+
  facet_wrap(facets = ~ TestID, scales = 'fixed', ncol = 4)+
  scale_y_continuous(limits = c(-5,5), name = expression(Normalised~Log[10] (da/dN, mm/cycle)))
  # + labs(caption = 'Independent Piecewise Bayesian Regression Models')
pNew

# Bayesian Results ----

library(readxl)
# modelDf <- as.data.frame(read.csv(file = 'modelDf.csv'))

modelDf$a <- rlnorm(n = nrow(modelDf), meanlog = LNm(m = 3, s = 1), sdlog = LNs(m = 3, s = 1))
modelDf$L <- rlnorm(n = nrow(modelDf), meanlog = LNm(m = 10, s = 2), sdlog = LNs(m = 10, s = 2))

# How to include model uncertainty? ----
nTot <- 1
modelDfMU <- modelDf %>% dplyr::slice(rep(1:nrow(modelDf), each = nTot))
set.seed(1008)
for(i in seq(from = 1, to = nrow(modelDfMU), by = 1)){
  modelDfMU$MU[i] <- rnorm(n = 1, mean = 0, sd = modelDfMU$sigma[i])
}

write.csv(x = modelDfMU, file = 'modelDfMU.csv')

# ----

resultsBayes <- read_excel('Results/resReduced.xlsx')
max(resultsBayes$Blocks)

# BS 7910 Probabilistic Model ----
nRep <- nrow(modelDf)
m.1 <- rep(x = 3.42, times = nRep); m.2 <- rep(x = 1.11, times = nRep); d_Ktr <- rep(x = 1098, times = nRep)
A.1 <- rnorm(n = nRep, mean = log10(5.3*10^-14), sd = 0.253); A.2 <- rnorm(n = nRep, mean = log10(5.6*10^-7), sd = 0.060)
model7910 <- as.data.frame(cbind(d_Ktr, m.1, m.2, A.1, A.2))

#write.csv(x = model7910, file = 'model7910.csv')

A1Bayes <- as.data.frame(modelDf$A.1); colnames(A1Bayes) <- 'x'; A1Bayes$model = ' Bayesian Model  '
A17910 <- as.data.frame(model7910$A.1); colnames(A17910) <- 'x'; A17910$model = ' BS 7910 Model  '; A1 <- rbind(A1Bayes, A17910)
A1$param <- 'Log[10] A1'; A1$model <- as.factor(A1$model); A1$param <- as.factor(A1$param)

A2Bayes <- as.data.frame(modelDf$A.2); colnames(A2Bayes) <- 'x'; A2Bayes$model = ' Bayesian Model  '
A27910 <- as.data.frame(model7910$A.2); colnames(A27910) <- 'x'; A27910$model = ' BS 7910 Model  '; A2 <- rbind(A2Bayes, A27910)
A2$param <- 'Log[10] A2'; A2$model <- as.factor(A2$model); A2$param <- as.factor(A2$param)

m1 <- as.data.frame(modelDf$m.1); colnames(m1) <- 'x'; m1$model = ' Bayesian Model  '
m1$x_7910 <- model7910$m.1#; colnames(m17910) <- 'x'#; m17910$model = ' BS 7910 Model  '; m1 <- rbind(m1Bayes, m17910)
m1$param <- 'm1'; m1$model <- as.factor(m1$model); m1$param <- as.factor(m1$param)

m2 <- as.data.frame(modelDf$m.2); colnames(m2) <- 'x'; m2$model = ' Bayesian Model  '
m2$x_7910 <- model7910$m.2#; colnames(m27910) <- 'x'#; m27910$model = ' BS 7910 Model  '; m2 <- rbind(m2Bayes, m27910)
m2$param <- 'm2'; m2$model <- as.factor(m2$model); m2$param <- as.factor(m2$param)

d_KtrBayes <- as.data.frame(modelDf$d_Ktr); colnames(d_KtrBayes) <- 'x'; d_KtrBayes$model = ' Bayesian Model  '
d_Ktr7910 <- as.data.frame(model7910$d_Ktr); colnames(d_Ktr7910) <- 'x'; d_Ktr7910$model = ' BS 7910 Model  '; d_Ktr <- rbind(d_KtrBayes, d_Ktr7910)
d_Ktr$param <- 'd_Ktr'; d_Ktr$model <- as.factor(d_Ktr$model); d_Ktr$param <- as.factor(d_Ktr$param)

ints_Df <- rbind(A1, A2) 
grads_Df <- rbind(m1, m2)

ints_plot <- ggplot(ints_Df)+
  #geom_density(aes(x = x, y = ..density.., alpha = model), fill = 'grey10', adjust = 0.0001)+
  geom_histogram(aes(x = x, y = ..density.., alpha = model), fill = 'grey10', bins = 50, position = 'identity')+
  facet_wrap(facets = ~ param, scales = 'free')+
  theme_bw(base_size = 12, base_family = 'Trebuchet MS')+
  theme(legend.title = element_blank(), legend.position = 'top')+
  scale_alpha_manual(values = c(0.3, 0.6))+
  scale_x_continuous(name = 'Value')+ scale_y_continuous(name = 'Probability Density')+
  theme(axis.title.x = element_blank())

grads_plot <- ggplot(grads_Df)+
  #geom_density(aes(x = x, y = ..density.., alpha = model), fill = 'grey10', adjust = 0.0001)+
  geom_histogram(aes(x = x, y = ..density..), alpha = 0.3, fill = 'grey10', bins = 50, position = 'identity')+
  geom_vline(data = grads_Df, mapping = aes(xintercept = x_7910, linetype = ' BS 7910 Model (Deterministic Parameter)  '))+
  scale_linetype_manual(values = 2)+
  facet_wrap(facets = ~ param, scales = 'free')+
  theme_bw(base_size = 12, base_family = 'Trebuchet MS')+
  theme(legend.title = element_blank(), legend.position = 'top')+
  scale_alpha_manual(values = c(0.3, 0.6))+
  scale_x_continuous(name = 'Value')+ scale_y_continuous(name = 'Probability Density')+
  labs(alpha = element_blank())

gridExtra::grid.arrange(ints_plot, grads_plot)

# BS 7910 Results ----

# Probabilistic Results


# Deterministic Results
fLifeDetMean <- 83.6; fLifeDetUB <- 26.8

# res7910 <- read_excel('Journals/Modelling Dependencies in Fatigue Assessment/Results/resReduced7910.xlsx')
# fLife7910 <- res7910$Blocks
res7910VarKth <- read_excel('Journals/Modelling Dependencies in Fatigue Assessment/Results/resReduced7910.2.xlsx')
fLife7910VarKth <- res7910VarKth$Blocks
resBayes <- read_excel('Journals/Modelling Dependencies in Fatigue Assessment/Results/resReduced.xlsx')
fLifeBayes <- resBayes$Blocks
resBayesMU <- read_excel('Journals/Modelling Dependencies in Fatigue Assessment/Results/resReducedMU.xlsx')
fLifeBayesMU <- resBayesMU$Blocks

# df7910 <- data.frame(fL = fLife7910, model = ' BS 7910 Probabilistic Model ')
df7910VarKth <- data.frame(fL = fLife7910VarKth, model = 'BS 7910 Probabilistic Model - Neglecting Model Uncertainty')
dfBayes <- data.frame(fL = fLifeBayes, model = 'Bayesian Model - Neglecting Model Uncertainty')
dfBayesMU <- data.frame(fL = fLifeBayesMU, model = 'Bayesian Model - Including Model Uncertainty')
resultsDf <- rbind(df7910VarKth, dfBayes, dfBayesMU)

results <- ggplot(resultsDf)+
  geom_histogram(aes(x = fL, y = ..density..), alpha = 0.5, bins = 100, position = 'identity')+
  geom_vline(aes(xintercept = fLifeDetMean, linetype = ' BS 7910 Deterministic Method: Best Estimate  '), alpha = 0.8)+
  geom_vline(aes(xintercept = fLifeDetUB, linetype = ' BS 7910 Deterministic Method: Recommended Lower Bound  '), alpha = 0.8)+
  scale_linetype_manual(values = c(5, 3))+
  facet_wrap(facets = ~ model, scales = 'free', ncol = 1)+
  theme_bw(base_size = 12, base_family = 'Trebuchet MS')+
  theme(legend.title = element_blank(), legend.position = 'top')+
  scale_alpha_manual(values = c(0.3, 0.6))+
  scale_x_continuous(name = 'Predicted Fatigue Life (Years)', limits = c(0,200))+scale_y_continuous(name = 'Probability Density')#+
#  guides(linetype = guide_legend(nrow = 2))


detRes <- read_excel('Journals/Modelling Dependencies in Fatigue Assessment/Results/detRes.xlsx')


library(copula)
copSims <- nrow(modelDf); p <- 2; rho <- 0.75
gaussianCop <- ellipCopula(family ='normal', param = rho, dim = 2)
claytonCop <- archmCopula(family = 'clayton', param = p, dim = 2)

claytonMvdc <- mvdc(copula = claytonCop, margins = c('lnorm', 'lnorm'),
                    paramMargins = list(list(meanlog = LNm(m = 3, s = 1), sdlog = LNs(m = 3, s = 1)),
                                        list(meanlog = LNm(m = 10, s = 2), sdlog = LNs(m = 10, s = 2))))
gaussianMvdc <- mvdc(copula = gaussianCop, margins = c('lnorm', 'lnorm'),
                     paramMargins = list(list(meanlog = LNm(m = 3, s = 1), sdlog = LNs(m = 3, s = 1)),
                                         list(meanlog = LNm(m = 10, s = 2), sdlog = LNs(m = 10, s = 2))))

claytonMV <- as.data.frame(rMvdc(n = copSims, mvdc = claytonMvdc)); claytonMV$type <- ' Clayton Copula Model  '
gaussianMV <- as.data.frame(rMvdc(n = copSims, mvdc = gaussianMvdc)); gaussianMV$type <- ' Gaussian Copula Model  '

indepMV <- data.frame(V1 = rlnorm(n = copSims, meanlog = LNm(m = 3, s = 1), sdlog =  LNs(m = 3, s = 1)),
                         V2 = rlnorm(n = copSims, meanlog = LNm(m = 10, s = 2), sdlog =  LNs(m = 10, s = 2)),
                         type = ' Independent  ')

mVars <- rbind(indepMV, gaussianMV, claytonMV); colnames(mVars) <- c('a', 'l', 'type')

copPlot <- ggplot(mVars)+
  geom_density_2d(aes(x = a, y = l), col = 'grey25')+
  facet_wrap(~ mVars$type, nrow = 3)+
  theme_bw(base_family = 'Trebuchet MS')+
  scale_x_continuous(name = 'Crack Depth, mm') + scale_y_continuous(name = 'Crack Length, mm')+
  theme(text = element_text(size = 10))

modelDf$ind_a <- mVars %>% dplyr::filter(type == ' Independent  ') %>% dplyr::select(a); colnames(modelDf[,ncol(modelDf)]) <- 'ind_a'
modelDf$ind_L <- mVars %>% dplyr::filter(type == ' Independent  ') %>% dplyr::select(l); colnames(modelDf[,ncol(modelDf)]) <- 'ind_L'

modelDf$clay_a <- mVars %>% dplyr::filter(type == ' Clayton Copula Model  ') %>% dplyr::select(a); colnames(modelDf[,ncol(modelDf)]) <- 'clay_a'
modelDf$clay_L <- mVars %>% dplyr::filter(type == ' Clayton Copula Model  ') %>% dplyr::select(l); colnames(modelDf[,ncol(modelDf)]) <- 'clay_L'

modelDf$gauss_a <- mVars %>% dplyr::filter(type == ' Gaussian Copula Model  ') %>% dplyr::select(a); colnames(modelDf[,ncol(modelDf)]) <- 'gauss_a'
modelDf$gauss_L <- mVars %>% dplyr::filter(type == ' Gaussian Copula Model  ') %>% dplyr::select(l); colnames(modelDf[,ncol(modelDf)]) <- 'gauss_L'

  
# Uncertain Inputs (a, 2c, sigmaM, sigmaB, cycles, R)

resClay <- read_excel('Results/resClay.xlsx')
fLifeBayesClay <- resClay$Blocks; BayesClayDf <- data.frame(fL = fLifeBayesClay, depMod = ' Clayton Copula Model  ')
resGauss <- read_excel('Results/resGauss.xlsx')
fLifeBayesGauss <- resGauss$Blocks; BayesGaussDf <- data.frame(fL = fLifeBayesGauss, depMod = ' Gaussian Copula Model  ')
resIndep <- read_excel('Results/resIndep.xlsx')
fLifeBayesIndep <- resIndep$Blocks; BayesIndepDf <- data.frame(fL = fLifeBayesIndep, depMod = ' Assumed Independence  ')

resCops <- rbind(BayesClayDf, BayesGaussDf, BayesIndepDf)

ggplot(resCops)+
  geom_histogram(aes(x = fL, y = ..density..), bins = 50, alpha = 0.5)+
  facet_wrap(~ depMod, ncol = 1)+
  theme_bw(base_size = 12, base_family = 'Trebuchet MS')+
  scale_y_continuous(name = 'Probability Density', breaks = seq(from = 0, to = 0.03, by = 0.01))+
  scale_x_continuous(name = 'Predicted Fatigue Life, Years', limits = c(40, 160))+
  geom_vline(xintercept = c(50, 150), linetype = 2)

pFailClay <- nrow(resClay %>% dplyr::filter(Blocks < 50)) / nrow (resClay); p150Clay <- nrow(resClay %>% dplyr::filter(Blocks > 150)) / nrow (resClay)
pFailGauss <- nrow(resGauss %>% dplyr::filter(Blocks < 50)) / nrow (resGauss); p150Gauss <- nrow(resGauss %>% dplyr::filter(Blocks > 150)) / nrow (resGauss)

pFailIndep <- nrow(resIndep %>% dplyr::filter(Blocks > 0) %>% dplyr::filter(Blocks <50)) / nrow (resIndep)
p150Indep <- nrow(resIndep %>% dplyr::filter(Blocks > 150)) / nrow (resIndep)

indepMV$xa <- errorPoints$`Initial a`; indepMV$xc <- errorPoints$`Initial c`

invalidSamplesPlot <- ggplot(indepMV)+
  geom_density_2d(aes(x = V1, y = V2), col = 'grey25', binwidth = 0.005)+
  geom_abline(intercept = 0, slope = 1, linetype = 2)+
  geom_point(aes(x = xa, y = 2 * xc), shape = 1, col = 'firebrick')+
  theme_bw(base_family = 'Trebuchet MS')+
  scale_x_continuous(name = 'Crack Depth, mm') + scale_y_continuous(name = 'Crack Length, mm')+
  theme(text = element_text(size = 10))


