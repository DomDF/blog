# Bayesian Modelling of Inspection Information
library(tidyverse); library(copula); library(rstan); library(extrafont)

LNs <- function(m,s) sqrt(log(1+s^2/m^2)); LNm <- function(m,s) log(m)-0.5*LNs(m,s)^2
Gscale <- function(s) (1/pi)*s*sqrt(6); Glocation <- function(m,s) m-gamma*Gscale(s)

setwd("~/PhD/Journals/VoI Framework")

set.seed(1008)

a_true <- rexp(n = 100, rate = 1/3); alpha_pod <- -3; beta_pod <- 1.25

PoD_1D <- function(a, alpha_1D, beta_1D){
  PoD <- exp(alpha_1D + beta_1D * a) / (1 + exp(alpha_1D + beta_1D * a))
  return (PoD)
}

pod_df <- data.frame(depth = a_true, det = NA)

for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
  
  pod_df$det[i] = rbinom(n = 1, size = 1, 
                         prob = PoD_1D(a = pod_df$depth[i], alpha_1D = alpha_pod, beta_1D = beta_pod))
  
}

ggplot(data = pod_df) +
  geom_point(mapping = aes(x = depth, y = det), shape = 1) +
  theme_bw(base_size = 12, base_family = 'Trebichet MS')+
  scale_x_continuous(name = 'Crack Depth, mm') +
  scale_y_continuous(name = 'Probability of Detection')

pod_df <- pod_df %>% tibble::rowid_to_column()

# Prior Predictive Simulation

x <- seq(from = 0, to = 10, length.out = 1e3); prPrSim_df <- data.frame(depth = x)

for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
  
  alpha = rnorm(n = 1e3, mean = 0, sd = 1);  beta = rnorm(n = 1e3, mean = 1, sd = 1)
  prPrSim_df$pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
  prPrSim_df$outcome[1] <- rbinom(n = 1, size = 1, prob = prPrSim_df$pr[i])
  
}

ggplot(data = prPrSim_df)+
  geom_point(mapping = aes(x = depth, y = pr, 
                           shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 1),  \u03b3  ~ N( \u03bc = 1, \u03c3 = 1)'))+
  scale_shape_manual(values = 1)+
  ggthemes::theme_base(base_size = 10, base_family = 'Trebuchet MS')+
  scale_x_continuous(name = 'Crack Depth, mm')+
  scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
  theme(legend.position = 'top', legend.title = element_blank())

# Running MCMC Sampler

rstan_options(auto_write = TRUE)
options(mc.cores=parallel::detectCores())

n_chains <- 4; iterations <- 1e4; warmup <- iterations/2; thinning <- 1 

pod_data_list <- list(N = nrow(pod_df), det = pod_df$det, depth = pod_df$depth, mu_PFI = 0.05, sigma_PFI = 0.01, rate = 0.1)

pod_model <- stan(file = 'R/Stan/pod.stan', data = pod_data_list, 
                  chains = n_chains, iter = iterations, warmup = warmup, thin = thinning)

library(ggmcmc)

posterior_df <- ggs(S = pod_model)

postPred_df <- posterior_df %>% dplyr::filter(grepl(pattern = 'postpred_PoI', x = Parameter))

quantDf <- data.frame(dataPoint = seq(from = 1, to = length(unique(postPred_df$Parameter)), by = 1), 
                      lower =  rep(x = 0, times = length(unique(postPred_df$Parameter))), 
                      higher = rep(x = 0, times = length(unique(postPred_df$Parameter))))

quantDf$depth <- pod_df$depth; quantDf$det <- pod_df$det

for (i in seq(from = 1, to = length(unique(postPred_df$Parameter)), by = 1)){
  
  quantDf$lower[i] <- quantile(x = postPred_df$value[postPred_df$Parameter == unique(postPred_df$Parameter)[i]], probs = 0.025)
  quantDf$med[i] <- quantile(x = postPred_df$value[postPred_df$Parameter == unique(postPred_df$Parameter)[i]], probs = 0.5)
  quantDf$higher[i] <- quantile(x = postPred_df$value[postPred_df$Parameter == unique(postPred_df$Parameter)[i]], probs = 0.975)

}

head(quantDf)

ggplot(data = quantDf)+
  geom_line(mapping = aes(x = depth, y = lower, linetype = ' 95% Bayesian CI  '))+
  geom_line(mapping = aes(x = depth, y = higher, linetype = ' 95% Bayesian CI  '))+
  geom_line(mapping = aes(x = depth, y = med, linetype = 'Maximum \nPosterior \nLikelihood'))+
  scale_linetype_manual(values = c(2, 1))+
  geom_point(mapping = aes(x = depth, y = det), shape = 1, size = 3) +
  theme_bw(base_size = 12, base_family = 'Trebuchet MS')+
  scale_x_continuous(name = 'Crack Depth, mm') +
  scale_y_continuous(name = 'Probability of Indication')+
  theme(legend.position = 'top', legend.title = element_blank())+
  geom_point(mapping = aes(x = 0, y = mu_PFI, shape = 'Maximum \nLikelihood \nEstimate of PFI'), size = 3)+
  scale_shape_manual(values = 4)
