blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
library(wordcloud); library(tidyverse)
# We can read a text file using 'readLines' and we can select a file interactively using 'file.choose'
# Both of these are Base R functions
# paper <- readLines(file.choose())
paper <- readLines(con = 'C:/Users/domen/Desktop/Conferences/IPW2019/Wordcloud/confPaper.txt')
print(paper[2])
paperRows <- strsplit(paste(unlist(paper), collapse = " "), '\n')
paperWords <- unlist(strsplit(paste(unlist(paperRows), collapse = " "), ' '))
paperRows <- strsplit(paste(unlist(paper), collapse = " "), '\n')
paperWords <- unlist(strsplit(paste(unlist(paperRows), collapse = " "), ' '))
paperWordData <- data.frame(word = c(rep(x = 0, times = length(paperWords))),
count = c(rep(x = 0, times = length(paperWords))),
check = c(rep(x = 0, times = length(paperWords))))
paperWordData$word <- as.vector(paperWords)
maxLength <- 5
for (i in seq(from = 1, to = nrow(paperWordData), by = 1)){
paperWordData$count[i] <- sum(paperWords == paperWords[i])
if (nchar(paperWordData$word[i]) < maxLength) {
paperWordData$check[i] <- 0
} else {
paperWordData$check[i] <- 1
}
}
paperWordData$word <- tolower(paperWordData$word)
paperWordData <- unique(paperWordData) %>%
dplyr::filter(check == 1)
paperWordData <- paperWordData[-c(13,274),] %>%
dplyr::filter(!grepl('âˆ†k_th', word))
skippedWords <- c('which', 'there', 'these', 'therefore')
paperWordData <- paperWordData %>%
dplyr::filter(!grepl(paste(skippedWords, collapse='|'), word))
set.seed(1008)
wordcloud(words = paperWordData$word,
freq = paperWordData$count,
min.freq = 3, max.words = 100,
random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
RColorBrewer::display.brewer.all()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
log(-4)
blogdown:::new_post_addin()
knitr::opts_chunk$set(collapse = TRUE)
library(wordcloud); library(tidyverse)
library(wordcloud); library(tidyverse)
paper <- readLines(con = 'C:/Users/domen/Desktop/Conferences/IPW2019/Wordcloud/confPaper.txt')
paper <- readLines(con = 'C:/Users/domen/Desktop/Conferences/IPW2019/Wordcloud/confPaper.txt')
readLines('C:/Users/domen/Desktop/Conferences/IPW2019/Wordcloud/confPaper.txt')
readLines(con = 'C:/Users/domen/Desktop/Conferences/IPW2019/Wordcloud/confPaper.txt')
readLines(con = C:/Users/domen/Desktop/Conferences/IPW2019/Wordcloud/confPaper.txt)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
servr::daemon_stop(4)
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
getwd()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
bookdown:::mathquill()
blogdown::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
paper <- readLines(con = 'C:/Users/domen/OneDrive/Documents/PhD/Conferences/IPW2019/Wordcloud/confPaper.txt')
paper
paperRows <- strsplit(paste(unlist(paper), collapse = " "), '\n')
paperWords <- unlist(strsplit(paste(unlist(paperRows), collapse = " "), ' '))
paperWords
paperWordData <- data.frame(word = c(rep(x = NA, times = length(paperWords))),
count = c(rep(x = NA, times = length(paperWords))),
check = c(rep(x = NA, times = length(paperWords))))
paperWordData
paperWordData$word <- as.vector(paperWords)
paperWordData
minLength <- 5
for (i in seq(from = 1, to = nrow(paperWordData), by = 1)){
paperWordData$count[i] <- sum(paperWords == paperWords[i])
if (nchar(paperWordData$word[i]) < minLength) {
paperWordData$check[i] <- 0
} else {
paperWordData$check[i] <- 1
}
}
paperWordData
minLength <- 4
for (i in seq(from = 1, to = nrow(paperWordData), by = 1)){
paperWordData$count[i] <- sum(paperWords == paperWords[i])
if (nchar(paperWordData$word[i]) < minLength) {
paperWordData$check[i] <- 0
} else {
paperWordData$check[i] <- 1
}
}
library(tidytext)
install.packages('tidytext')
paper
as_tibble(paper)
library(tidyverse)
as_tibble(paper)
tidytext::unnest_tokens(tbl = as_tibble(paper))
tidytext::unnest_tokens(tbl = as_tibble(paper)$value)
tidytext::unnest_tokens(word, as_tibble(paper)$value)
rowid_to_column(as_tibble(paper))
paper_tibble <- rowid_to_column(as_tibble(paper))
paper_tibble %>%
tidytext::unnest_tokens(word, value)
paper_tbl <- as_tibble(paper) %>%
rowid_to_column() %>%
unnest_tokens(word, value)
library(wordcloud); library(tidyverse); library(tidytext)
paper <- readLines(con = 'C:/Users/domen/OneDrive/Documents/PhD/Conferences/IPW2019/Wordcloud/confPaper.txt')
paper_tbl <- as_tibble(paper) %>%
rowid_to_column() %>%
unnest_tokens(word, value)
print(paper[2])
head(paper_tbl)
paper_tbl %>%
mutate(count = sum(word == word))
minLength <- 4
paper_tbl %>%
mutate(occurences = count(word))
paper_tbl %>%
count(x = word)
paper_tbl <- as_tibble(paper) %>%
rowid_to_column() %>%
unnest_tokens(word, value)
paper_tbl %>%
count(x = word)
paper_tbl <- as_tibble(paper) %>%
rowid_to_column() %>%
tidytext::unnest_tokens(word, value) %>%
anti_join(tidytext::get_stopwords())
paper_tbl
paper_tbl %>%
count(x = word)
paper_tbl %>%
count(word)
?get_stopwords
paper_tbl <- as_tibble(paper) %>%
#  rowid_to_column() %>%
tidytext::unnest_tokens(word, value) %>%
anti_join(tidytext::get_stopwords())
head(paper_tbl)
paper_tbl <- as_tibble(paper) %>%
#  rowid_to_column() %>%
tidytext::unnest_tokens(word, value)
head(paper_tbl)
paper_tbl %>%
count(word)
paper_tbl <- as_tibble(paper) %>%
#  rowid_to_column() %>%
tidytext::unnest_tokens(word, value)# %>%
#  anti_join(tidytext::get_stopwords())
paper_tbl <- paper_tbl %>%
count(word)
paper_tbl <- paper_tbl %>%
count(word) %>%
mutate(check = case_when(nchar(word) < minLength ~ 0,
nchar(word) >= minLength ~ 1))
head(paper_tbl)
?count
View(paper_tbl)
paper_tbl <- as_tibble(paper) %>%
rowid_to_column() %>%
tidytext::unnest_tokens(word, value) %>%
anti_join(tidytext::get_stopwords())
minLength <- 4
paper_tbl <- paper_tbl %>%
count(word)
paper_tbl <- as_tibble(paper) %>%
rowid_to_column() %>%
tidytext::unnest_tokens(word, value) %>%
anti_join(tidytext::get_stopwords())
minLength <- 4
paper_tbl <- paper_tbl %>%
count(word) %>%
mutate(check = case_when(nchar(word) < minLength ~ 0,
nchar(word) >= minLength ~ 1))
View(paper_tbl)
paper_tbl <- paper_tbl %>%
dplyr::filter(check == 1)
View(paper_tbl)
set.seed(1008)
wordcloud(words = paper_tbl$word,
freq = paperWordData$count,
min.freq = 3, max.words = 100,
random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
wordcloud(words = paper_tbl$word,
freq = paperWordData$count,
min.freq = 3, max.words = 100,
random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 5, name = 'Dark2'))
set.seed(1008)
wordcloud(words = paper_tbl$word,
freq = paperWordData$count,
min.freq = 3, max.words = 100,
random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 20, name = 'Dark2'))
paper_tbl %>%
wordcloud(words = word,
freq = n,
min.freq = 3, max.words = 100,
random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
paper_tbl %>%
wordcloud(words = word,
freq = n, min.freq = 3, max.words = 30, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
wordcloud(words = paper_tbl$word,
freq = paper_tbl$n, min.freq = 3, max.words = 30, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
wordcloud(words = paper_tbl$word,
freq = paper_tbl$n, min.freq = 3, max.words = 100, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
stop_words('en')
stopwords('en')
tidytext::stop_words
View(tidytext::stop_words)
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value)
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value) %>%
count(word)
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords(language = 'en'))
paper_tbl %>%
arrange(desc(n))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 3))+
geom_bar(mapping = aes(x = word, y = n))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 3))+
geom_col(mapping = aes(x = word, y = n))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 5))+
geom_col(mapping = aes(x = word, y = n))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 5))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 45))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 5))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords(language = 'en'))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords())
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
set.seed(1008)
wordcloud(words = paper_tbl$word,
freq = paper_tbl$n, min.freq = 3, max.words = 100, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
paper_tbl <- paper_tbl %>%
anti_join(tidytext::stop_words())
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords)
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords())
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
library(wordcloud); library(tidyverse); library(tidytext)
paper <- readLines(con = 'C:/Users/domen/OneDrive/Documents/PhD/Conferences/IPW2019/Wordcloud/confPaper.txt')
print(paper[2])
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value) %>%
count(word)
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value) %>%
count(word)
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords())
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
?tm_map
tidytext::stop_words
tidytext::stop_words()
View(tidytext::stop_words())
View(tidytext::stop_words
)
View(tidytext::get_stopwords())
View(tidytext::get_stopwords(language = 'EN'))
View(tidytext::get_stopwords(language = 'en'))
stopwords::stopwords_getsources()
View(tidytext::get_stopwords(language = 'en', source = 'stopwords_iso'))
View(tidytext::get_stopwords(language = 'en', source = 'stopwords-iso'))
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords(language = 'en', source = 'stopwords-iso'))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
set.seed(1008)
wordcloud(words = paper_tbl$word,
freq = paper_tbl$n, min.freq = 3, max.words = 100, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
install.packages('tm')
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value) %>%
dplyr::filter(is.na(as.numeric(word)))
count(word)
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value) %>%
dplyr::filter(is.na(as.numeric(word))) %>%
count(word)
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords(language = 'en', source = 'stopwords-iso'))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))
set.seed(1008)
wordcloud(words = paper_tbl$word,
freq = paper_tbl$n, min.freq = 3, max.words = 100, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))+
ggthemes::theme_tufte()
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme(axis.text.x = element_text(angle = 90))+
ggthemes::theme_base()
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
ggthemes::theme_base() + theme(axis.text.x = element_text(angle = 90))+
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
ggthemes::theme_calc() + theme(axis.text.x = element_text(angle = 90))+
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
ggthemes::theme_calc() +
theme(axis.text.x = element_text(angle = 90))+
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
ggthemes::theme_economist() +
theme(axis.text.x = element_text(angle = 90))+
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
ggthemes::theme_economist() +
theme(axis.text.x = element_text(angle = 90))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
ggthemes::theme_few()+
theme(axis.text.x = element_text(angle = 90))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme_void()+
theme(axis.text.x = element_text(angle = 90))
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme_minimal()+ theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank())
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme_minimal()+ theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank())+
labs(y = 'count)
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n > 10))+
geom_col(mapping = aes(x = word, y = n))+
theme_minimal()+ theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank())+
labs(y = 'count')
glimpse(paper_tbl)
head(x = paper_tbl)
head(x = paper_tbl %>%
arrange(n))
head(x = paper_tbl %>%
arrange(desc(x = n)))
glimpse(x = paper_tbl %>%
arrange(desc(x = n)))
head(x = paper_tbl %>%
arrange(desc(x = n)))
head(x = paper_tbl %>%
arrange(desc(x = n)), n = 10)
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n >= 12))+
geom_col(mapping = aes(x = word, y = n))+
theme_minimal()+ theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank())+
labs(y = 'count')
?grepl
set.seed(1008)
wordcloud(words = paper_tbl$word,
freq = paper_tbl$n, min.freq = 3, max.words = 100, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
knitr::opts_chunk$set(collapse = TRUE)
library(wordcloud); library(tidyverse); library(tidytext)
# We can read a text file using 'readLines' and we can select a file interactively using 'file.choose'
# Both of these are Base R functions
paper <- readLines(file.choose())
paper <- readLines(con = 'C:/Users/domen/OneDrive/Documents/PhD/Conferences/IPW2019/Wordcloud/confPaper.txt')
print(paper[2])
paper_tbl <- as_tibble(paper) %>%
tidytext::unnest_tokens(word, value) %>%
dplyr::filter(is.na(as.numeric(word))) %>%
count(word)
minLength <- 4
paper_tbl <- paper_tbl %>%
mutate(check = case_when(nchar(word) < minLength ~ 0,
nchar(word) >= minLength ~ 1))
paper_tbl <- paper_tbl %>%
anti_join(tidytext::get_stopwords(language = 'en', source = 'stopwords-iso'))
head(x = paper_tbl %>%
arrange(desc(x = n)), n = 10)
ggplot(paper_tbl %>%
arrange(desc(n)) %>%
dplyr::filter(n >= 12))+
geom_col(mapping = aes(x = word, y = n))+
theme_minimal()+ theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank())+
labs(y = 'count')
set.seed(1008) # For a reproducable image
wordcloud(words = paper_tbl$word, freq = paper_tbl$n,
min.freq = 3, max.words = 100, random.order = FALSE, rot.per = 0.25,
colors = brewer.pal(n = 8, name = 'Dark2'))
RColorBrewer::display.brewer.all()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
