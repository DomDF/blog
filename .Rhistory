yend = dnorm(x = value, mean = 2, sd = 1),
col = 'Mean = 2, Variance = 1'),
alpha = 0.25)+
geom_segment(mapping = aes(xend = -2, y = dnorm(x = value, mean = 2, sd = 1),
yend = dnorm(x = value, mean = 2, sd = 1),
col = 'Mean = 2, Variance = 1'),
alpha = 0.25,
arrow = arrow(length = unit(x = 0.25, units = 'cm'), type = 'closed'))+
geom_segment(mapping = aes(xend = value,
yend = dnorm(x = value, mean = 1, sd = sqrt(2)),
col = 'Mean = 1, Variance = 2'),
alpha = 0.25)+
geom_segment(mapping = aes(xend = -2, y = dnorm(x = value, mean = 1, sd = sqrt(2)),
yend = dnorm(x = value, mean = 1, sd = sqrt(2)),
col = 'Mean = 1, Variance = 2'),
alpha = 0.25,
arrow = arrow(length = unit(x = 0.25, units = 'cm'), type = 'closed'))+
scale_color_manual(values = c('firebrick', 'forestgreen'))+
scale_x_continuous(limits = c(-2, 5))+
theme_ddf_light()
ggplot(data = as.tibble(x = obs), mapping = aes(x = value, y = 0))+
geom_point(mapping = aes(y = 0), shape = 1, size = 2)+
stat_function(geom = 'line', fun = dnorm,
args = list(mean = 2, sd = 1),
aes(col = '\u03bc = 2, \u03c3 = 1'))+
stat_function(geom = 'line', fun = dnorm,
args = list(mean = 1, sd = sqrt(2)),
aes(col = '\u03bc = 1, \u03c3 = 2'))+
geom_segment(mapping = aes(xend = value,
yend = dnorm(x = value, mean = 2, sd = 1),
col = '\u03bc = 2, \u03c3 = 1'),
alpha = 0.25)+
geom_segment(mapping = aes(xend = -2, y = dnorm(x = value, mean = 2, sd = 1),
yend = dnorm(x = value, mean = 2, sd = 1),
col = '\u03bc = 2, \u03c3 = 1'),
alpha = 0.25,
arrow = arrow(length = unit(x = 0.25, units = 'cm'), type = 'closed'))+
geom_segment(mapping = aes(xend = value,
yend = dnorm(x = value, mean = 1, sd = sqrt(2)),
col = '\u03bc = 1, \u03c3 = 2'),
alpha = 0.25)+
geom_segment(mapping = aes(xend = -2, y = dnorm(x = value, mean = 1, sd = sqrt(2)),
yend = dnorm(x = value, mean = 1, sd = sqrt(2)),
col = '\u03bc = 1, \u03c3 = \u+221A2'),
ggplot(data = as.tibble(x = obs), mapping = aes(x = value, y = 0))+
geom_point(mapping = aes(y = 0), shape = 1, size = 2)+
stat_function(geom = 'line', fun = dnorm,
args = list(mean = 2, sd = 1),
aes(col = '\u03bc = 2, \u03c3 = 1'))+
stat_function(geom = 'line', fun = dnorm,
args = list(mean = 1, sd = sqrt(2)),
aes(col = '\u03bc = 1, \u03c3 = \u221A 2'))+
geom_segment(mapping = aes(xend = value,
yend = dnorm(x = value, mean = 2, sd = 1),
col = '\u03bc = 2, \u03c3 = 1'),
alpha = 0.25)+
geom_segment(mapping = aes(xend = -2, y = dnorm(x = value, mean = 2, sd = 1),
yend = dnorm(x = value, mean = 2, sd = 1),
col = '\u03bc = 2, \u03c3 = 1'),
alpha = 0.25,
arrow = arrow(length = unit(x = 0.25, units = 'cm'), type = 'closed'))+
geom_segment(mapping = aes(xend = value,
yend = dnorm(x = value, mean = 1, sd = sqrt(2)),
col = '\u03bc = 1, \u03c3 = \u221A 2'),
alpha = 0.25)+
geom_segment(mapping = aes(xend = -2, y = dnorm(x = value, mean = 1, sd = sqrt(2)),
yend = dnorm(x = value, mean = 1, sd = sqrt(2)),
col = '\u03bc = 1, \u03c3 = \u221A 2'),
alpha = 0.25,
arrow = arrow(length = unit(x = 0.25, units = 'cm'), type = 'closed'))+
scale_color_manual(values = c('firebrick', 'forestgreen'))+
scale_x_continuous(limits = c(-2, 5))+
theme_ddf_light()
exp_samples
data <- exp_samples
?fitdist
?fitdistr
?fitdistrplus::fitdist()
library(fitdistrplus)
sample_data <- exp_samples
fitdist(data = sample_data, distr = 'exp')
fitted_model <- fitdist(data = sample_data, distr = 'exp')
fitted_model
fitted_model$cor
fitted_model$loglik
library(reticulate)
reticulate::r_to_py(exp_samples)
library(reticulate)
sample_data = reticulate::r_to_py(exp_samples)
dist
library(fitdistrplus)
sample_data <- exp_samples
rate_fit_R <- fitdist(data = sample_data, distr = 'exp', method = 'mle')
rate_fit_R$loglik
rate_fit_R$loglik
rate_fit_R$estimate
knitr::opts_chunk$set(collapse = TRUE)
library(extrafont); library(tidyverse); library(DomDF)
plot <- ggplot(data = extracted_samples %>%
dplyr::filter(Parameter == 'rate'))+
geom_density(mapping = aes(x = value, y = ..density..), col = NULL)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
obs <- c(0, 3)
knitr::opts_chunk$set(collapse = TRUE)
library(extrafont); library(tidyverse); library(DomDF)
sum(log(dnorm(x = obs, mean = 1, sd = 2))) # Red function
sum(log(dnorm(x = obs, mean = 2, sd = 1))) # Green function
n_samples <- 25; true_rate <- 1; set.seed(1)
exp_samples <- rexp(n = n_samples,
rate = true_rate)
exp_lik_df <- data.frame(rate = double(),
lik = double())
for (i in seq(from = 0.2, to = 2, by = 0.2)){
exp_lik_df <- rbind(exp_lik_df,
data.frame(rate = i,
log_lik = sum(log(
dexp(x = exp_samples,
rate = i)))))
}
max_log_lik <- exp_lik_df[which.max(x = exp_lik_df$log_lik),]
print(exp_lik_df)
print(max_log_lik)
library(fitdistrplus)
sample_data <- exp_samples
rate_fit_R <- fitdist(data = sample_data,
distr = 'exp',
method = 'mle')
rate_fit_R$estimate
rate_fit_R$loglik
summary(exp_samples)
library(rstan)
exp_posterior_samples <- sampling(object = exp_model,
data = list(N = n_samples,
samples = exp_samples),
seed = 1008)
library(ggmcmc)
extracted_samples <- ggs(S = exp_posterior_samples)
head(x = extracted_samples, n = 5)
plot <- ggplot(data = extracted_samples %>%
dplyr::filter(Parameter == 'rate'))+
geom_density(mapping = aes(x = value, y = ..density..), col = NULL)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
plot
plot <- ggplot(data = extracted_samples %>%
dplyr::filter(Parameter == 'rate'))+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(extracted_samples), by = 100))
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 100)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1)
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 50)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'green4')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 10)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 100)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 20)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 50)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = rates)+
geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
geom_point(mapping = aes(x = exp_samples, y = 0, shape = 'Observations'))+
scale_shape_manual(values = c(1))+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 50)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = NULL)+
#  geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
geom_point(mapping = aes(x = exp_samples, y = 0, shape = 'Observations'))+
scale_shape_manual(values = c(1))+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 50)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
rates <- extracted_samples %>%
dplyr::filter(Parameter == 'rate')
plot <- ggplot(data = NULL)+
#  geom_density(mapping = aes(x = value, y = ..density..), col = NA)+
geom_point(mapping = aes(x = exp_samples, y = 0, shape = 'Observations'),
size = 2, alpha = 0.6)+
scale_shape_manual(values = c(1))+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'exp(x)')+
theme_ddf_light()
for (i in seq(from = 1, to = nrow(rates), by = 50)){
plot <- plot+
stat_function(geom = 'line', fun = dexp, args = list(rate = rates$value[i]), alpha = 0.1, col = 'forestgreen')
}
plot
ggplot(data = extracted_samples %>%
dplyr::filter(Parameter == 'rate'))+
geom_density(mapping = aes(x = value, y = ..density..), fill = 'purple4', alpha = 0.2)+
geom_vline(aes(lty = 'MLE solution', xintercept = rate_fit_R$estimate))+
scale_linetype_manual(values = c(2))+
scale_x_continuous(name = 'Rate Parameter')+
scale_y_continuous(name = 'Posterior Likelihood')+
theme_ddf_light()
install.packages("gganimate")
setwd("~/GitHub/blog")
blogdown:::serve_site()
blogdown:::serve_site()
setwd("~/GitHub/blog")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::hugo_version()
blogdown::stop_server()
blogdown::build_dir()
blogdown::new_content(kind = 'publication')
blogdown::serve_site()
blogdown:::serve_site()
1+1
blogdown:::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
install.packages('maps')
blogdown::build_site()
install.packages('wordlcloud')
blogdown::build_site()
blogdown::build_site()
knitr::opts_chunk$set(echo = TRUE); library(extrafont)
theme_ddf_light <- function (base_size = 12, base_family = extrafont::choose_font(fonts = 'Bahnschrift'))
{
half_line <- base_size
background <- 'white'; foreground <- 'grey20'
# params <- ls(pattern = '^geom_', env = as.environment('package:ggplot2')); geoms <- gsub('geom_', '', params)
# lapply(X = unlist(geoms), FUN = update_geom_defaults(list(col = 'foreground', fill = 'foreground')))
update_geom_defaults(geom = 'point', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'jitter', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'count', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'line', list(col = foreground))
update_geom_defaults(geom = 'path', list(col = foreground))
update_geom_defaults(geom = 'errorbar', list(col = foreground))
update_geom_defaults(geom = 'curve', list(col = foreground))
update_geom_defaults(geom = 'polygon', list(col = foreground))
update_geom_defaults(geom = 'contour', list(col = foreground))
#  update_geom_defaults(geom = 'contour_filled', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'density', list(col = foreground))
update_geom_defaults(geom = 'density_2d', list(col = foreground))
update_geom_defaults(geom = 'bar', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'col', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'histogram', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'text', list(col = foreground))
theme(
line = element_line(colour = 'black', size = 0.5,
linetype = 1, lineend = 'round'),
rect = element_rect(fill = background, colour = NA),
text = element_text(family = base_family, face = 'plain',
colour = foreground, size = base_size,
lineheight = 0.9,  hjust = 0.5,
vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.text = element_text(size = base_size*2/3, family = base_family, colour = foreground),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2),
vjust = 1, angle = 30),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2),
hjust = 1, angle = 30),
axis.ticks = element_line(colour = foreground),
axis.ticks.length = unit(half_line / 2, 'pt'),
axis.title.x = element_text(margin = margin(t = 0.8 * half_line/3,
b = 0.8 * half_line/2)),
axis.title.y = element_text(angle = 90,
margin = margin(r = 0.8 * half_line/3,
l = 0.8 * half_line/2)),
legend.background = element_rect(colour = background),
#legend.margin = unit(0.2, 'cm'),
legend.key = element_rect(fill = background, colour = NA),
legend.key.size = unit(1.2, 'lines'),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(colour = foreground, family = base_family, size = base_size*2/3),
legend.text.align = NULL,
legend.title = element_blank(), #text(hjust = 0),
legend.title.align = NULL,
legend.position = 'top',
legend.direction = NULL,
legend.justification = 'center',
legend.box = NULL,
panel.background = element_rect(fill = background, colour = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(), #element_line(colour = background, linetype = 2, size = 0.1),
panel.grid.minor = element_blank(),
#panel.margin = unit(half_line, "pt"), panel.margin.x = NULL,
#panel.margin.y = NULL, panel.ontop = FALSE,
strip.background = element_blank(), #element_rect(fill = "grey85", colour = NA),
strip.text = element_text(family = base_family, colour = foreground, size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = half_line/2,
b = 0)),#half_line/4)),
strip.text.y = element_text(angle = -90,
margin = margin(l = half_line/2,
r = 0)),#half_line/4)),
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
#    plot.background = element_rect(colour = foreground),
plot.title = element_text(size = rel(1.2),
margin = margin(b = half_line, unit = 'pt'),
hjust = 0),
plot.margin = margin(t = half_line/2, r = half_line/2, b = half_line/2, l = half_line/2),
complete = TRUE)
}
animate(plot = accidents_plot, fps = 20, duration = 30, end_pause = 100)
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown::install_theme(theme = "gcushen/hugo-academic", update_config=FALSE, force = TRUE)
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
install.packages('wordcloud')
blogdown::new_site(theme = 'gcushen/hugo-academic')
setwd("~/blog")
blogdown::new_site(theme = 'gcushen/hugo-academic')
blogdown::install_theme(theme = "gcushen/hugo-academic", update_config=TRUE, force = TRUE)
blogdown:::serve_site()
blogdown::new_site(theme = 'gcushen/hugo-academic', theme_example = T)
blogdown::install_theme('gcushen/hugo-academic')
blogdown::install_theme(theme = "gcushen/hugo-academic", update_config=TRUE, force = TRUE)
blogdown:::serve_site()
blogdown::hugo_version()
blogdown:: update_hugo()
blogdown::hugo_version()
blogdown::build_site()
blogdown::serve_site()
setwd("~/GitHub")
setwd("~/GitHub/blog")
blogdown::serve_site()
blogdown::install_theme('gcushen/hugo-academic')
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
install.packages('blogdown')
install.packages("blogdown")
setwd("~/ayb_blog")
library(blogdown)
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
new_site(theme = 'gcushen/hugo-academic', sample = TRUE, theme_example = TRUE, empty_dirs = TRUE, to_yaml = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
setwd("~/GitHub/blog")
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown::stop_server()
