stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior Probability Density')+
guides(fill = guide_colourbar(barwidth = 20))
PoD_extracted_pred_red
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
geom_point(aes(shape = 'Some (Simulated) Test Results'), col = 'white')+
scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior Probability Density')+
guides(fill = guide_colourbar(barwidth = 15))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some (Simulated) Test Results'), col = 'white')+
scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior Probability Density')+
guides(fill = guide_colourbar(barwidth = 15))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some \n(Simulated) \nTest \nResults'), col = 'white')+
scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior \nProbability \nDensity')+
guides(fill = guide_colourbar(barwidth = 15))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some \n(Simulated) \nTest \nResults'), col = 'red')+
scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior \nProbability \nDensity')+
guides(fill = guide_colourbar(barwidth = 15))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some \n(Simulated) \nTest \nResults'), col = 'red')+
scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior \nProbability \nDensity', shape = NULL)+
guides(fill = guide_colourbar(barwidth = 15))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
#  geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some \n(Simulated) \nTest \nResults'), col = 'red')+
#  scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior \nProbability \nDensity', shape = NULL)+
guides(fill = guide_colourbar(barwidth = 15))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
#  geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some \n(Simulated) \nTest \nResults'), col = 'red')+
#  scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior \nProbability Density', shape = NULL)+
guides(fill = guide_colourbar(barwidth = 15))
data_plot <- pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(aes(shape = 'Some (Simulated) Test Results'))+
scale_shape_manual(values = 4)+
scale_x_continuous(name = 'Crack Depth, mm') +
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()
data_plot
pod_df
pod_df %>% dplyr::filter(depth < 2)
pod_df %>% dplyr::filter(depth < 3)
nrow(pod_df %>% dplyr::filter(depth < 3))
PoD_extracted_pred <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'pred', x = Parameter)) %>%
mutate(Chain_ID = paste('Chain', Chain))
pred_df <- data.frame(depth = depth_pred, Parameter = character(length = K)) %>%
mutate(Parameter = unique(PoD_extracted_pred$Parameter))
PoD_extracted_pred <- PoD_extracted_pred %>%
left_join(y = pred_df, by = 'Parameter')
PoD_extracted_pred_red <- PoD_extracted_pred %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid %% 100 == 0)
ggplot(data = PoD_extracted_pred_red)+
stat_density2d(geom = 'raster', contour = FALSE,
aes(x = depth, y = value, fill = after_stat(density)))+
#  geom_point(data = pod_df, aes(x = depth, y = det, shape = 'Some \n(Simulated) \nTest \nResults'), col = 'red')+
#  scale_shape_manual(values = 4)+
scale_fill_viridis_c()+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()+
theme(legend.title = element_text(family = 'Bahnschrift'))+
labs(fill = 'Posterior \nProbability Density', shape = NULL)+
guides(fill = guide_colourbar(barwidth = 15))
ggplot(data = PoD_extracted_params)+
geom_density(mapping = aes(x = value, y = ..density.., fill = Chain_ID), alpha = 0.4)+
geom_vline(mapping = aes(xintercept = true_value, linetype = 'True Value'))+
scale_linetype_manual(values = 2)+
facet_wrap(facets = ~ Parameter, ncol = 1, scales = 'fixed')+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
mu_alpha <- 0; sigma_alpha <- 1; mu_beta <- 1; sigma_beta <- 1; N_samples <- 1e3; min_depth <- 0; max_depth <- 10
x <- seq(from = min_depth, to = max_depth, length.out = N_samples)
prPrSim_df <- data.frame(depth = x)
for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha)
beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
prPrSim_df$PoD_pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
}
head(prPrSim_df)
library(extrafont)
good_priors_plot <- ggplot(data = prPrSim_df)+
geom_point(mapping = aes(x = depth, y = PoD_pr,
shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 1),  \u03b2  ~ N( \u03bc = 1, \u03c3 = 1)'),
col = 'forestgreen', alpha = 0.6)+
scale_shape_manual(values = 1)+
ggthemes::theme_tufte(base_size = 10, base_family = 'Bahnschrift')+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
theme_ddf_light()+
theme(legend.position = 'top', legend.title = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank())+
labs(title = "...that's more like it!")
mu_alpha <- 0; sigma_alpha <- 100; mu_beta <- 0; sigma_beta <- 100; N_samples <- 1e3
x <- seq(from = min_depth, to = max_depth, length.out = N_samples); prPrSim_df <- data.frame(depth = x)
for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha);  beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
prPrSim_df$PoD_pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
}
bad_priors_plot <- ggplot(data = prPrSim_df)+
geom_point(mapping = aes(x = depth, y = PoD_pr,
shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 100),  \u03b2  ~ N( \u03bc = 0, \u03c3 = 100)'),
col = 'firebrick', alpha = 0.6)+
scale_shape_manual(values = 1)+
ggthemes::theme_tufte(base_size = 10, base_family = 'Bahnschrift')+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
theme_ddf_light()+
theme(legend.position = 'top', legend.title = element_blank())+
labs(title = 'Some surprisingly bad priors...')
library(patchwork)
comb_plot <- bad_priors_plot + good_priors_plot
comb_plot
inv_logit <- function(p){
inv_logit <- 1 / (1 + exp( - p))
return (inv_logit)
}
x <- seq(from = -5, to = 5, length.out = 100); y <- inv_logit(p = x)
ggplot(data = data.frame(x = x, y = y), mapping = aes(x = x, y = y))+
geom_line()+
scale_x_continuous(name = 'a')+
scale_y_continuous(name = 'Inverse Logit (a)')+
theme_ddf_light()
inv_logit <- function(p){
inv_logit <- 1 / (1 + exp( - p))
return (inv_logit)
}
x <- seq(from = -5, to = 5, length.out = 100); y <- inv_logit(p = x)
ggplot(data = data.frame(x = x, y = y), mapping = aes(x = x, y = y))+
geom_line()+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'Inverse Logit (x)')+
theme_ddf_light()
inv_logit <- function(p){
inv_logit <- 1 / (1 + exp( - p))
return (inv_logit)
}
x <- seq(from = -10, to = 10, length.out = 100); y <- inv_logit(p = x)
ggplot(data = data.frame(x = x, y = y), mapping = aes(x = x, y = y))+
geom_line()+
scale_x_continuous(name = 'x')+
scale_y_continuous(name = 'Inverse Logit (x)')+
theme_ddf_light()
0.2 / 0.8
4 / 1
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
getwd()
knitr::opts_chunk$set(echo = TRUE); library(extrafont)
theme_ddf_light <- function (base_size = 12, base_family = extrafont::choose_font(fonts = 'Bahnschrift'))
{
half_line <- base_size
background <- 'white'; foreground <- 'grey20'
# params <- ls(pattern = '^geom_', env = as.environment('package:ggplot2')); geoms <- gsub('geom_', '', params)
# lapply(X = unlist(geoms), FUN = update_geom_defaults(list(col = 'foreground', fill = 'foreground')))
update_geom_defaults(geom = 'point', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'jitter', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'count', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'line', list(col = foreground))
update_geom_defaults(geom = 'path', list(col = foreground))
update_geom_defaults(geom = 'errorbar', list(col = foreground))
update_geom_defaults(geom = 'curve', list(col = foreground))
update_geom_defaults(geom = 'polygon', list(col = foreground))
update_geom_defaults(geom = 'contour', list(col = foreground))
#  update_geom_defaults(geom = 'contour_filled', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'density', list(col = foreground))
update_geom_defaults(geom = 'density_2d', list(col = foreground))
update_geom_defaults(geom = 'bar', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'col', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'histogram', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'text', list(col = foreground))
theme(
line = element_line(colour = 'black', size = 0.5,
linetype = 1, lineend = 'round'),
rect = element_rect(fill = background, colour = NA),
text = element_text(family = base_family, face = 'plain',
colour = foreground, size = base_size,
lineheight = 0.9,  hjust = 0.5,
vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.text = element_text(size = base_size*2/3, family = base_family, colour = foreground),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2),
vjust = 1, angle = 30),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2),
hjust = 1, angle = 30),
axis.ticks = element_line(colour = foreground),
axis.ticks.length = unit(half_line / 2, 'pt'),
axis.title.x = element_text(margin = margin(t = 0.8 * half_line/3,
b = 0.8 * half_line/2)),
axis.title.y = element_text(angle = 90,
margin = margin(r = 0.8 * half_line/3,
l = 0.8 * half_line/2)),
legend.background = element_rect(colour = background),
#legend.margin = unit(0.2, 'cm'),
legend.key = element_rect(fill = background, colour = NA),
legend.key.size = unit(1.2, 'lines'),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(colour = foreground, family = base_family, size = base_size*2/3),
legend.text.align = NULL,
legend.title = element_blank(), #text(hjust = 0),
legend.title.align = NULL,
legend.position = 'top',
legend.direction = NULL,
legend.justification = 'center',
legend.box = NULL,
panel.background = element_rect(fill = background, colour = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(), #element_line(colour = background, linetype = 2, size = 0.1),
panel.grid.minor = element_blank(),
#panel.margin = unit(half_line, "pt"), panel.margin.x = NULL,
#panel.margin.y = NULL, panel.ontop = FALSE,
strip.background = element_blank(), #element_rect(fill = "grey85", colour = NA),
strip.text = element_text(family = base_family, colour = foreground, size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = half_line/2,
b = 0)),#half_line/4)),
strip.text.y = element_text(angle = -90,
margin = margin(l = half_line/2,
r = 0)),#half_line/4)),
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
#    plot.background = element_rect(colour = foreground),
plot.title = element_text(size = rel(1.2),
margin = margin(b = half_line, unit = 'pt'),
hjust = 0),
plot.margin = margin(t = half_line/2, r = half_line/2, b = half_line/2, l = half_line/2),
complete = TRUE)
}
Accidents_Dec2015 %>%
dplyr::select(Date, Number_of_Casualties, Accident_Severity) %>%
ggplot(mapping = aes(x = Date))+
geom_bar(stat = 'count', fill = 'grey80')+
facet_wrap(facets = ~ Accident_Severity, scales = 'free')+
#ggthemes::theme_tufte(base_size = 12, base_family = 'Bahnschrift')+
theme_ddf_light()+
coord_flip()+
theme(axis.title = element_blank())
library(gganimate); library(tidyverse)
Accidents_Dec2015 <- read.csv("~/Kaggle/Car Accidents/Accidents0515.csv") %>%
mutate(Date = lubridate::dmy(Date)) %>%
dplyr::filter(Date >= lubridate::ymd(20151201)) %>%
mutate(Accident_Severity = case_when(Accident_Severity == 1 ~ 'Fatal',
Accident_Severity == 2 ~ 'Serious',
Accident_Severity == 3 ~ 'Slight'))
head(Accidents_Dec2015 %>%
dplyr::select(Date, Longitude, Latitude, Number_of_Casualties, Accident_Severity))
UK_coords <- ggplot2::map_data(map = 'world', region = 'UK')
accidents_plot <- ggplot(data = UK_coords)+
geom_polygon(mapping = aes(x = long, y = lat, group = group), col = 'black', fill = NA)+
theme_void(base_size = 12, base_family = 'Bahnschrift')+
geom_point(data = Accidents_Dec2015 %>% dplyr::filter(grepl(pattern = 'Slight', x = Accident_Severity)),
mapping = aes(x = Longitude, y = Latitude, col = as.factor(Accident_Severity), size = Number_of_Casualties),
alpha = 0.1)+
geom_point(data = Accidents_Dec2015 %>% dplyr::filter(grepl(pattern = 'Serious', x = Accident_Severity)),
mapping = aes(x = Longitude, y = Latitude, col = as.factor(Accident_Severity), size = Number_of_Casualties),
alpha = 0.2)+
geom_point(data = Accidents_Dec2015 %>% dplyr::filter(grepl(pattern = 'Fatal', x = Accident_Severity)),
mapping = aes(x = Longitude, y = Latitude, col = as.factor(Accident_Severity), size = Number_of_Casualties),
alpha = 0.4)+
theme(legend.position = 'right')+
scale_size_continuous(breaks = c(1, 3, 9))+
scale_color_manual(values = c('firebrick', 'forestgreen', 'steelblue'))+
guides(col = guide_legend(title = element_blank(), ncol = 1),
size = guide_legend(title = element_text('Casualties', size = 10), ncol = 1))
accidents_plot
library(gganimate)
accidents_plot <- accidents_plot +
transition_time(time = Date)+
shadow_trail()+
ggtitle(label = 'UK Car Accidents in December 2015', subtitle = 'Date : {frame_time}')+
labs(caption = 'Data from Kaggle: https://www.kaggle.com/silicon99/dft-accident-data/data |  @d73mwf')
Accidents_Dec2015 %>%
dplyr::select(Date, Number_of_Casualties, Accident_Severity) %>%
ggplot(mapping = aes(x = Date))+
geom_bar(stat = 'count', fill = 'grey80')+
facet_wrap(facets = ~ Accident_Severity, scales = 'free')+
#ggthemes::theme_tufte(base_size = 12, base_family = 'Bahnschrift')+
theme_ddf_light()+
coord_flip()+
theme(axis.title = element_blank())
setwd("~/GitHub/blog")
knitr::opts_chunk$set(echo = TRUE); library(extrafont)
theme_ddf_light <- function (base_size = 12, base_family = extrafont::choose_font(fonts = 'Bahnschrift'))
{
half_line <- base_size
background <- 'white'; foreground <- 'grey20'
# params <- ls(pattern = '^geom_', env = as.environment('package:ggplot2')); geoms <- gsub('geom_', '', params)
# lapply(X = unlist(geoms), FUN = update_geom_defaults(list(col = 'foreground', fill = 'foreground')))
update_geom_defaults(geom = 'point', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'jitter', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'count', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'line', list(col = foreground))
update_geom_defaults(geom = 'path', list(col = foreground))
update_geom_defaults(geom = 'errorbar', list(col = foreground))
update_geom_defaults(geom = 'curve', list(col = foreground))
update_geom_defaults(geom = 'polygon', list(col = foreground))
update_geom_defaults(geom = 'contour', list(col = foreground))
#  update_geom_defaults(geom = 'contour_filled', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'density', list(col = foreground))
update_geom_defaults(geom = 'density_2d', list(col = foreground))
update_geom_defaults(geom = 'bar', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'col', list(col = foreground, fill = foreground))
#  update_geom_defaults(geom = 'histogram', list(col = foreground, fill = foreground))
update_geom_defaults(geom = 'text', list(col = foreground))
theme(
line = element_line(colour = 'black', size = 0.5,
linetype = 1, lineend = 'round'),
rect = element_rect(fill = background, colour = NA),
text = element_text(family = base_family, face = 'plain',
colour = foreground, size = base_size,
lineheight = 0.9,  hjust = 0.5,
vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.text = element_text(size = base_size*2/3, family = base_family, colour = foreground),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2),
vjust = 1, angle = 30),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2),
hjust = 1, angle = 30),
axis.ticks = element_line(colour = foreground),
axis.ticks.length = unit(half_line / 2, 'pt'),
axis.title.x = element_text(margin = margin(t = 0.8 * half_line/3,
b = 0.8 * half_line/2)),
axis.title.y = element_text(angle = 90,
margin = margin(r = 0.8 * half_line/3,
l = 0.8 * half_line/2)),
legend.background = element_rect(colour = background),
#legend.margin = unit(0.2, 'cm'),
legend.key = element_rect(fill = background, colour = NA),
legend.key.size = unit(1.2, 'lines'),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(colour = foreground, family = base_family, size = base_size*2/3),
legend.text.align = NULL,
legend.title = element_blank(), #text(hjust = 0),
legend.title.align = NULL,
legend.position = 'top',
legend.direction = NULL,
legend.justification = 'center',
legend.box = NULL,
panel.background = element_rect(fill = background, colour = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(), #element_line(colour = background, linetype = 2, size = 0.1),
panel.grid.minor = element_blank(),
#panel.margin = unit(half_line, "pt"), panel.margin.x = NULL,
#panel.margin.y = NULL, panel.ontop = FALSE,
strip.background = element_blank(), #element_rect(fill = "grey85", colour = NA),
strip.text = element_text(family = base_family, colour = foreground, size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = half_line/2,
b = 0)),#half_line/4)),
strip.text.y = element_text(angle = -90,
margin = margin(l = half_line/2,
r = 0)),#half_line/4)),
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
#    plot.background = element_rect(colour = foreground),
plot.title = element_text(size = rel(1.2),
margin = margin(b = half_line, unit = 'pt'),
hjust = 0),
plot.margin = margin(t = half_line/2, r = half_line/2, b = half_line/2, l = half_line/2),
complete = TRUE)
}
setwd("~/GitHub/blog")
remove.packages(pkgs = schrute)
remove.packages(pkgs = 'schrute')
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
