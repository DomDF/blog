expected_costs = scales::dollar(expected_costs)) %>%
dplyr::rename('Expected Cost' = expected_costs) %>%
gt() %>%
tab_style(
style = list(
cell_fill(color = 'white')
),
locations = cells_body()
)
prepost_analysis <- RHugin::read.rhd('prepost_influence_diagram.net')
false_pos <- 0.1; prob_lower <- 0; prob_upper <- 0.4
sa_df <- data.frame(fn = double(), VoI = double())
for (fn in seq(from = prob_lower, to = prob_upper, length.out = 9)) {
prepost_analysis <- RHugin::read.rhd('prepost_influence_diagram.net')
test_results_table <- get.table(domain = prepost_analysis, node = 'Result')
test_results_table['Freq'] <- c((1 - fn), fn, 0,
0, 0, 1,
false_pos, (1 - false_pos), 0,
0, 0, 1)
set.table(domain = prepost_analysis, node = 'Result', data = test_results_table)
RHugin::compile(object = prepost_analysis)
RHugin::propagate(object = prepost_analysis)
expected_costs <- get.utility(domain = prepost_analysis, node = 'Test')
sa_df <- rbind(sa_df, data.frame(fn = fn, VoI = max(0, expected_costs[1] - expected_costs[2])))
}
VoPI <- 420
ggplot(data = sa_df,
mapping = aes(x = fn, y = VoI))+
geom_line(mapping = aes(linetype = 'Imperfect Information'))+
geom_point(data = sa_df %>%
dplyr::filter(fn == 0.05),
mapping = aes(x = fn, y = VoI), shape = 1, size = 3)+
geom_text(data = sa_df %>%
dplyr::filter(fn == 0.05),
mapping = aes(x = 0.075, y = 375, label = paste('VoI at 5%:', scales::dollar(signif(VoI, 3)))),
family = 'Bahnschrift', size = 3)+
geom_hline(mapping = aes(linetype = 'Perfect Information',
yintercept = VoPI))+
scale_x_continuous(name = 'Probability of the Test Missing Damage',
limits = c(prob_lower, prob_upper), labels = scales::percent)+
scale_y_continuous(name = 'Expected Value of Diagnostic Test',
limits = c(0, VoPI), labels = scales::dollar)+
theme_ddf_light()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::hugo_version()
blogdown:: update_hugo()
blogdown:: update_hugo()
blogdown:: update_hugo()
getwd()
setwd("~/")
getwd()
blogdown:: update_hugo()
blogdown:: update_hugo()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
install.packages(c("cli", "ggraph", "magrittr", "pillar", "RcppArmadillo", "rprojroot", "showtext", "sysfonts", "tune", "vctrs"))
blogdown:::preview_site(startup = TRUE)
install.packages("blogdown")
blogdown:::preview_site(startup = TRUE)
install.packages("blogdown")
blogdown:::preview_site(startup = TRUE)
install.packages("blogdown")
install.packages("blogdown")
setwd("~/GitHub/blog")
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
c
ch
ch'h'
'h'
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
library(extrafont); library(tidyverse); library(DomDF)
library(magick)
SB_logo <- magick::image_read(path = '~/R/Football Analytics/SB_Regular.png')
library(StatsBombR)
get_player_xG <- function(i, mcmc_df, model_data_df){
log_odds <- (mcmc_df$alpha +
mcmc_df$beta_dist_goal * model_data_df$DistToGoal[i] +
mcmc_df$beta_dist_keeper * model_data_df$DistToKeeper[i] +
mcmc_df$beta_angle_dev * model_data_df$AngleDeviation[i] +
mcmc_df$beta_angle_goal * model_data_df$AngleToGoal[i] +
mcmc_df$beta_cone_def * model_data_df$DefendersInCone[i] +
mcmc_df$beta_pressure * model_data_df$under_pressure[i] +
mcmc_df$beta_with_head * model_data_df$shot.body_part.name_processed_Head[i] +
mcmc_df$beta_with_weak_foot * model_data_df$shot.body_part.name_processed_Weaker.Foot[i])
player <- model_data_df$player.name[i]; pred_player <- mcmc_df$player[i]
results_df <- data.frame(xG = (exp(x = log_odds) / (1 + exp(x = log_odds))),
player = player,
pred_player = pred_player) %>%
as_tibble()
return(results_df)
}
get_team_xG <- function(i, mcmc_df, model_data_df, n_prob = 1e3){
log_odds <- (mcmc_df$alpha_pp +
mcmc_df$beta_dist_goal_pp * model_data_df$DistToGoal[i] +
mcmc_df$beta_dist_keeper_pp * model_data_df$DistToKeeper[i] +
mcmc_df$beta_angle_dev_pp * model_data_df$AngleDeviation[i] +
mcmc_df$beta_angle_goal_pp * model_data_df$AngleToGoal[i] +
mcmc_df$beta_cone_def_pp * model_data_df$DefendersInCone[i] +
mcmc_df$beta_pressure_pp * model_data_df$under_pressure[i] +
mcmc_df$beta_with_head_pp * model_data_df$shot.body_part.name_processed_Head[i] +
mcmc_df$beta_with_weak_foot_pp * model_data_df$shot.body_part.name_processed_Weaker.Foot[i])
player <- model_data_df$player.name[i]#; pred_player <- mcmc_df$player[i]
results_df <- data.frame(xG = (exp(x = log_odds) / (1 + exp(x = log_odds))),
player = player,
pred_player = 'Unknown Player') %>%
as_tibble()
return(results_df)
}
AFC_goals_df <- read.csv(file = 'AFC_goals_df.csv') %>%
select(-c(X)) %>%
as_tibble()
AFC_df <- read.csv(file = 'xG_model_data.csv') %>%
select(-c(X)) %>%
as_tibble()
AFC_shots_df <- read.csv(file = 'AFC_shots_df.csv') %>%
select(-X) %>%
mutate(player.name = forcats::fct_reorder(.f = player.name, .x = n_shots))
Arsenal_shots_plot <- ggplot(data = AFC_shots_df, mapping = aes(y = player.name))+
geom_col(mapping = aes(x = n_shots, fill = 'Shots'), alpha = 1/4)+
geom_col(mapping = aes(x = n_goals, fill = 'Goals'), alpha = 1/2)+
geom_text(mapping = aes(x = (25 + n_goals),
label = paste0(n_goals, ' goals from ', n_shots, ' shots.')),
size = 3, family = 'Bahnschrift')+
scale_fill_viridis_d()+
DomDF::theme_ddf_light(base_size = 11)+
theme(axis.title = element_blank(), axis.text.y = element_text(angle = 0))+
labs(title = "Arsenal's goalscorers from the 2003-04 Premier League Season",
subtitle = 'Excluding penalties',
caption = 'Data from StatsBomb |  @Domenic_DF   ')
Arsenal_shots_plot
grid::grid.raster(image = SB_logo, x = 1/8, y = 1/50, just = c('left', 'bottom'), width = unit(1, 'inches'))
label_df_Ars <- AFC_goals_df %>%
mutate(label = case_when(
shot.type.name != 'Open Play' ~ paste0(player.name, '\n(', shot.type.name, ')'),
TRUE ~ paste0(player.name)
)) %>%
select(id, location.x, location.y, label, DistToGoal)
Arsenal_goals_plot <- SBpitch::create_Pitch(goaltype = 'box', JdeP = TRUE, BasicFeatures = FALSE)+
geom_point(data = AFC_goals_df,
mapping = aes(x = location.x, y = location.y, fill = shot.statsbomb_xg),
shape = 21, alpha = 2/3, col = 'black', size = 4)+
scale_fill_gradient2(limits = c(0, 1), low = 'white', mid = 'orange', high = 'firebrick', midpoint = 0.5,
guide = guide_colorbar(title.position = 'top',  barwidth = 20, barheight = 0.5))+
ggrepel::geom_text_repel(data = label_df_Ars %>%
dplyr::filter(DistToGoal >= 18 ),
mapping = aes(x = location.x, y = location.y, label = label),
size = 3, family = 'Bahnschrift', segment.alpha = 1/2)+
# geom_segment(data = Arsenal_goals,
#              mapping = aes(x = location.x, y = location.y, xend = shot.end_location.x, yend = shot.end_location.y),
#              col = 'forestgreen', alpha = 2/3, size = 1, arrow = arrow(length = unit(0.2, 'cm')))+
coord_flip(xlim = c(70, 120))+
labs(fill = '\nStatsBomb xG',
title = "   Where Arsenal scored from in the 2003-04 Premier League season",
subtitle = '    Excluding penalties, with goalcorers from further than 18 yards labelled',
caption = 'Data from StatsBomb |  @Domenic_DF   ')+
theme_void(base_size = 11, base_family = 'Bahnschrift')+
theme(legend.position = 'top', legend.box = 'vertical')
Arsenal_goals_plot
grid::grid.raster(image = SB_logo, x = 1/8, y = 1/50, just = c('left', 'bottom'), width = unit(1, 'inches'))
blogdown::shortcode("youtube", "3icTC--cHfA")
xG_mcmc_samples <- read.csv(file = 'xG_mcmc_samples.csv') %>%
select(-c(X)) %>%
as_tibble()
xG_model_data_processed <- read.csv(file = 'model_data_processed.csv') %>%
select(-X) %>%
as_tibble()
TH_df <- xG_mcmc_samples %>%
dplyr::filter(grepl(pattern = '[2]', x = Parameter)) %>%
mutate(Parameter = str_remove(string = Parameter, pattern = '.2]')) %>%
tidyr::pivot_wider(names_from = Parameter, values_from = value) %>%
mutate(player = unique(xG_model_data_processed$player.name)[2])
DB_df <- xG_mcmc_samples %>%
dplyr::filter(grepl(pattern = '[1]', x = Parameter)) %>%
mutate(Parameter = str_remove(string = Parameter, pattern = '.1]')) %>%
tidyr::pivot_wider(names_from = Parameter, values_from = value) %>%
mutate(player = unique(xG_model_data_processed$player.name)[1])
any_player_df <- xG_mcmc_samples %>%
dplyr::filter(grepl(pattern = '_pp', x = Parameter)) %>%
tidyr::pivot_wider(names_from = Parameter, values_from = value)
GS_df <- xG_mcmc_samples %>%
dplyr::filter(grepl(pattern = '[3]', x = Parameter)) %>%
mutate(Parameter = str_remove(string = Parameter, pattern = '.3]')) %>%
tidyr::pivot_wider(names_from = Parameter, values_from = value) %>%
mutate(player = unique(xG_model_data_processed$player.name)[3])
RP_df <- xG_mcmc_samples %>%
dplyr::filter(grepl(pattern = '[5]', x = Parameter)) %>%
mutate(Parameter = str_remove(string = Parameter, pattern = '.5]')) %>%
tidyr::pivot_wider(names_from = Parameter, values_from = value) %>%
mutate(player = unique(xG_model_data_processed$player.name)[5])
FL_df <- xG_mcmc_samples %>%
dplyr::filter(grepl(pattern = '[6]', x = Parameter)) %>%
mutate(Parameter = str_remove(string = Parameter, pattern = '.6]')) %>%
tidyr::pivot_wider(names_from = Parameter, values_from = value) %>%
mutate(player = unique(xG_model_data_processed$player.name)[6])
goal_id <- '95851ea0-761a-4bbe-9d66-9fa9eb07d69e'
label_df_Ars <- AFC_goals_df %>%
dplyr::filter(id == goal_id) %>%
mutate(label =  paste0(player.name, ', \nxG = ', round(x = shot.statsbomb_xg, digits = 3))) %>%
select(id, location.x, location.y, label)
Arsenal_goals_plot <- SBpitch::create_Pitch(goaltype = 'box', JdeP = TRUE, BasicFeatures = FALSE)+
geom_point(data = AFC_goals_df %>%
dplyr::filter(id == goal_id),
mapping = aes(x = location.x, y = location.y),
shape = 21, alpha = 2/3, col = 'black', size = 4)+
ggrepel::geom_text_repel(data = label_df_Ars %>%
dplyr::filter(id == goal_id),
mapping = aes(x = location.x, y = location.y, label = label),
size = 3, family = 'Bahnschrift', segment.alpha = 1/2)+
geom_segment(data = AFC_goals_df %>%
dplyr::filter(id == goal_id),
mapping = aes(x = location.x, y = location.y, xend = shot.end_location.x, yend = shot.end_location.y),
col = 'forestgreen', alpha = 2/3, size = 1, arrow = arrow(length = unit(0.2, 'cm')))+
coord_flip(xlim = c(70, 120))+
labs(title = "   Bergkamp's goal vs. Birmingham (November 2003)",
#subtitle = '    Excluding penalties, with goalscorers from further than 18 yards labelled',
caption = 'Data from StatsBomb |  @Domenic_DF   ')+
theme_void(base_size = 11, base_family = 'Bahnschrift')+
theme(legend.position = 'top', legend.box = 'vertical')
Arsenal_goals_plot
grid::grid.raster(image = SB_logo, x = 1/8, y = 1/50, just = c('left', 'bottom'), width = unit(1, 'inches'))
DB_plot_df <- get_player_xG(i = 26, mcmc_df = DB_df, model_data_df = xG_model_data_processed)
team_plot_df <- get_team_xG(i = 26, mcmc_df = any_player_df, model_data_df = xG_model_data_processed)
plot_df <- rbind(DB_plot_df, team_plot_df)
ggplot(data = plot_df)+
geom_density(mapping = aes(x = xG, y = ..density..),
fill = 'grey80', alpha = 0.8)+
geom_vline(mapping = aes(xintercept = xG_model_data_processed$shot.statsbomb_xg[26],
linetype = 'StatsBomb xG'))+
scale_linetype_manual(values = c(2))+
facet_wrap(facets = ~ pred_player, ncol = 1)+
labs(y = 'Likelihood', x = 'AllYourBayes xG')+
DomDF::theme_ddf_light()
goal_id <- '4c14e2ff-ecc6-4ba1-9981-a71be09979fe'
label_df_Ars <- AFC_goals_df %>%
dplyr::filter(id == goal_id) %>%
mutate(label =  paste0(player.name, ', \nxG = ', round(x = shot.statsbomb_xg, digits = 3))) %>%
select(id, location.x, location.y, label)
Arsenal_goals_plot <- SBpitch::create_Pitch(goaltype = 'box', JdeP = TRUE, BasicFeatures = FALSE)+
geom_point(data = AFC_goals_df %>%
dplyr::filter(id == goal_id),
mapping = aes(x = location.x, y = location.y),
shape = 21, alpha = 2/3, col = 'black', size = 4)+
ggrepel::geom_text_repel(data = label_df_Ars,
mapping = aes(x = location.x, y = location.y, label = label),
size = 3, family = 'Bahnschrift', segment.alpha = 1/2)+
geom_segment(data = AFC_goals_df %>%
dplyr::filter(id == goal_id),
mapping = aes(x = location.x, y = location.y, xend = shot.end_location.x, yend = shot.end_location.y),
col = 'forestgreen', alpha = 2/3, size = 1, arrow = arrow(length = unit(0.2, 'cm')))+
coord_flip(xlim = c(70, 120))+
labs(title = "   Henry's goal vs. Man Utd (March 2004)",
#subtitle = '    Excluding penalties, with goalscorers from further than 18 yards labelled',
caption = 'Data from StatsBomb |  @Domenic_DF   ')+
theme_void(base_size = 11, base_family = 'Bahnschrift')+
theme(legend.position = 'top', legend.box = 'vertical')
Arsenal_goals_plot
grid::grid.raster(image = SB_logo, x = 1/8, y = 1/50, just = c('left', 'bottom'), width = unit(1, 'inches'))
TH_plot_df <- get_player_xG(i = 83, mcmc_df = TH_df, model_data_df = xG_model_data_processed)
team_plot_df <- get_team_xG(i = 83, mcmc_df = any_player_df, model_data_df = xG_model_data_processed)
plot_df <- rbind(TH_plot_df, team_plot_df)
ggplot(data = plot_df)+
geom_density(mapping = aes(x = xG, y = ..density..),
fill = 'grey80', alpha = 0.8)+
geom_vline(mapping = aes(xintercept = xG_model_data_processed$shot.statsbomb_xg[83],
linetype = 'StatsBomb xG'))+
scale_linetype_manual(values = c(2))+
facet_wrap(facets = ~ pred_player, ncol = 1)+
labs(y = 'Likelihood', x = 'AllYourBayes xG')+
DomDF::theme_ddf_light()
shot_id <- '9ebaba51-e866-450c-9c07-78fc6d662f09'
SB_xG <- (AFC_df %>%
dplyr::filter(id == shot_id))$shot.statsbomb_xg
label_df_shots <- AFC_df %>%
filter(id == shot_id) %>%
dplyr::mutate(label = paste0(player.name, ', \nxG = ', round(x = SB_xG, digits = 3))) %>%
select(id, location.x, location.y, label)
Arsenal_shots_plot <- SBpitch::create_Pitch(goaltype = 'box', JdeP = TRUE, BasicFeatures = FALSE)+
geom_point(data = AFC_df %>%
dplyr::filter(id == shot_id),
mapping = aes(x = location.x, y = location.y),
shape = 21, alpha = 2/3, col = 'black', size = 4)+
ggrepel::geom_text_repel(data = label_df_shots,
mapping = aes(x = location.x, y = location.y, label = label),
size = 3, family = 'Bahnschrift', segment.alpha = 1/2)+
geom_segment(data = AFC_df %>%
dplyr::filter(id == shot_id),
mapping = aes(x = location.x, y = location.y, xend = shot.end_location.x, yend = shot.end_location.y),
col = 'firebrick', alpha = 2/3, size = 1, arrow = arrow(length = unit(0.2, 'cm')))+
coord_flip(xlim = c(70, 120))+
labs(title = "   Gilberto Silva's shot vs. Chelsea (Feb 2004)",
#subtitle = '    Excluding penalties, with goalscorers from further than 18 yards labelled',
caption = 'Data from StatsBomb |  @Domenic_DF   ')+
theme_void(base_size = 11, base_family = 'Bahnschrift')+
theme(legend.position = 'top', legend.box = 'vertical')
Arsenal_shots_plot
grid::grid.raster(image = SB_logo, x = 1/8, y = 1/50, just = c('left', 'bottom'), width = unit(1, 'inches'))
DB_plot_df <- get_player_xG(i = 193, mcmc_df = DB_df, model_data_df = xG_model_data_processed)
RP_plot_df <- get_player_xG(i = 193, mcmc_df = RP_df, model_data_df = xG_model_data_processed)
FL_plot_df <- get_player_xG(i = 193, mcmc_df = FL_df, model_data_df = xG_model_data_processed)
TH_plot_df <- get_player_xG(i = 193, mcmc_df = TH_df, model_data_df = xG_model_data_processed)
GS_plot_df <- get_player_xG(i = 193, mcmc_df = GS_df, model_data_df = xG_model_data_processed)
team_plot_df <- get_team_xG(i = 193, mcmc_df = any_player_df, model_data_df = xG_model_data_processed)
plot_df <- rbind(GS_plot_df, TH_plot_df, RP_plot_df, FL_plot_df) %>%
mutate(pred_player = factor(x = pred_player,
levels = c('Gilberto Aparecido da Silva',
'Fredrik Ljungberg',
'Thierry Henry',
'Robert Pirès ')))
ggplot(data = plot_df)+
geom_density(mapping = aes(x = xG, y = ..density..),
fill = 'grey80', alpha = 0.8)+
geom_vline(mapping = aes(xintercept = xG_model_data_processed$shot.statsbomb_xg[193],
linetype = 'StatsBomb xG'))+
scale_linetype_manual(values = c(2))+
facet_wrap(facets = ~ pred_player, ncol = 2)+
labs(y = 'Likelihood', x = 'AllYourBayes xG')+
DomDF::theme_ddf_light()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::preview_site(startup = FALSE)
blogdown:::preview_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::preview_site(startup = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
library(extrafont); library(tidyverse); library(DomDF)
library(magick)
SB_logo <- magick::image_read(path = '~/R/Football Analytics/SB_Regular.png')
library(StatsBombR)
get_player_xG <- function(i, mcmc_df, model_data_df){
log_odds <- (mcmc_df$alpha +
mcmc_df$beta_dist_goal * model_data_df$DistToGoal[i] +
mcmc_df$beta_dist_keeper * model_data_df$DistToKeeper[i] +
mcmc_df$beta_angle_dev * model_data_df$AngleDeviation[i] +
mcmc_df$beta_angle_goal * model_data_df$AngleToGoal[i] +
mcmc_df$beta_cone_def * model_data_df$DefendersInCone[i] +
mcmc_df$beta_pressure * model_data_df$under_pressure[i] +
mcmc_df$beta_with_head * model_data_df$shot.body_part.name_processed_Head[i] +
mcmc_df$beta_with_weak_foot * model_data_df$shot.body_part.name_processed_Weaker.Foot[i])
player <- model_data_df$player.name[i]; pred_player <- mcmc_df$player[i]
results_df <- data.frame(xG = (exp(x = log_odds) / (1 + exp(x = log_odds))),
player = player,
pred_player = pred_player) %>%
as_tibble()
return(results_df)
}
get_team_xG <- function(i, mcmc_df, model_data_df, n_prob = 1e3){
log_odds <- (mcmc_df$alpha_pp +
mcmc_df$beta_dist_goal_pp * model_data_df$DistToGoal[i] +
mcmc_df$beta_dist_keeper_pp * model_data_df$DistToKeeper[i] +
mcmc_df$beta_angle_dev_pp * model_data_df$AngleDeviation[i] +
mcmc_df$beta_angle_goal_pp * model_data_df$AngleToGoal[i] +
mcmc_df$beta_cone_def_pp * model_data_df$DefendersInCone[i] +
mcmc_df$beta_pressure_pp * model_data_df$under_pressure[i] +
mcmc_df$beta_with_head_pp * model_data_df$shot.body_part.name_processed_Head[i] +
mcmc_df$beta_with_weak_foot_pp * model_data_df$shot.body_part.name_processed_Weaker.Foot[i])
player <- model_data_df$player.name[i]#; pred_player <- mcmc_df$player[i]
results_df <- data.frame(xG = (exp(x = log_odds) / (1 + exp(x = log_odds))),
player = player,
pred_player = 'Unknown Player') %>%
as_tibble()
return(results_df)
}
AFC_goals_df <- read.csv(file = 'AFC_goals_df.csv') %>%
select(-c(X)) %>%
as_tibble()
AFC_df <- read.csv(file = 'xG_model_data.csv') %>%
select(-c(X)) %>%
as_tibble()
blogdown::shortcode("youtube", id = '"w7Ft2ymGmfc""', color = '"white"')
blogdown::shortcode("youtube", id = '"3icTC--cHfA""', color = '"white"')
blogdown:::serve_site()
blogdown::stop
blogdown:::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
