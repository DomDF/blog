ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) %>%
mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
ggs_density(D = PoD_extracted_samples %>%
mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) %>%
mutate(Chain = paste('Chain', Chain))
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter))
mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
Parameter == 'beta' ~ beta_true))
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter))
mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
Parameter == 'beta' ~ beta_true))
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) %>%
mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, # %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
ggs_density(D = PoD_extracted_samples %>%
mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
Parameter == 'beta' ~ beta_true)),# %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples %>%
mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
Parameter == 'beta' ~ beta_true)),# %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
ggs_density(D = PoD_extracted_samples, #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))# %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point()+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det), shape = 1)+
geom_point()+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det), shape = 1)+
geom_point()+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(shape = 1)+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(shape = 5)+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(shape = 7)+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 100; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(shape = 4)+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 40; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(shape = 4)+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(rstan)
PoD_samples <- sampling(object = PoD_model, data = list(N = N, det = pod_df$det, depth = pod_df$depth))
library(ggmcmc)
PoD_extracted_samples <- ggs(S = PoD_samples)
PoD_extracted_samples <- PoD_extracted_samples %>%
dplyr::filter(grepl(pattern = 'alpha|beta', x = Parameter)) #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))
head(PoD_extracted_samples)
ggs_density(D = PoD_extracted_samples, #%>%
#  mutate(true_value = case_when(Parameter == 'alpha' ~ alpha_true,
#                                Parameter == 'beta' ~ beta_true))# %>%
#mutate(Chain = paste('Chain', Chain)),
greek = TRUE)+
#  geom_vline(xintercept = true_value)+
theme_ddf_light()+
labs(x = 'Value', y = 'Posterior Probability Density')
x <- seq(from = min_depth, to = max_depth, length.out = N_samples); prPrSim_df <- data.frame(depth = x)
for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha)
beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
prPrSim_df$pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
prPrSim_df$outcome[i] <- rbinom(n = 1, size = 1, prob = prPrSim_df$pr[i])
}
head(prPrSim_df)
library(extrafont)
good_priors_plot <- ggplot(data = prPrSim_df)+
geom_point(mapping = aes(x = depth, y = pr,
shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 1),  \u03b3  ~ N( \u03bc = 1, \u03c3 = 1)'),
col = 'forestgreen', alpha = 0.6)+
scale_shape_manual(values = 1)+
ggthemes::theme_tufte(base_size = 10, base_family = 'Bahnschrift')+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
theme_ddf_light()+
theme(legend.position = 'top', legend.title = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank())+
labs(title = "...that's more like it")
mu_alpha <- 0; sigma_alpha <- 100; mu_beta <- 0; sigma_beta <- 100; N_samples <- 1e3
x <- seq(from = min_depth, to = max_depth, length.out = N_samples); prPrSim_df <- data.frame(depth = x)
for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha);  beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
prPrSim_df$pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
prPrSim_df$outcome[i] <- rbinom(n = 1, size = 1, prob = prPrSim_df$pr[i])
}
bad_priors_plot <- ggplot(data = prPrSim_df)+
geom_point(mapping = aes(x = depth, y = pr,
shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 100),  \u03b3  ~ N( \u03bc = 0, \u03c3 = 100)'),
col = 'firebrick', alpha = 0.6)+
scale_shape_manual(values = 1)+
ggthemes::theme_tufte(base_size = 10, base_family = 'Bahnschrift')+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
theme_ddf_light()+
theme(legend.position = 'top', legend.title = element_blank())+
labs(title = 'Some surprisingly bad priors!')
library(patchwork)
comb_plot <- bad_priors_plot + good_priors_plot
comb_plot
mu_alpha <- 0; sigma_alpha <- 1; mu_beta <- 1; sigma_beta <- 1; N_samples <- 1e3; min_depth <- 0; max_depth <- 10
x <- seq(from = min_depth, to = max_depth, length.out = N_samples); prPrSim_df <- data.frame(depth = x)
for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha)
beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
prPrSim_df$pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
prPrSim_df$outcome[i] <- rbinom(n = 1, size = 1, prob = prPrSim_df$pr[i])
}
head(prPrSim_df)
library(extrafont)
good_priors_plot <- ggplot(data = prPrSim_df)+
geom_point(mapping = aes(x = depth, y = pr,
shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 1),  \u03b2  ~ N( \u03bc = 1, \u03c3 = 1)'),
col = 'forestgreen', alpha = 0.6)+
scale_shape_manual(values = 1)+
ggthemes::theme_tufte(base_size = 10, base_family = 'Bahnschrift')+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
theme_ddf_light()+
theme(legend.position = 'top', legend.title = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank())+
labs(title = "...that's more like it")
mu_alpha <- 0; sigma_alpha <- 100; mu_beta <- 0; sigma_beta <- 100; N_samples <- 1e3
x <- seq(from = min_depth, to = max_depth, length.out = N_samples); prPrSim_df <- data.frame(depth = x)
for (i in seq(from = 1, to = nrow(prPrSim_df), by = 1)) {
alpha = rnorm(n = N_samples, mean = mu_alpha, sd = sigma_alpha);  beta = rnorm(n = N_samples, mean = mu_beta, sd = sigma_beta)
prPrSim_df$pr[i] <- exp(alpha + beta * log(prPrSim_df$depth[i]))/(1 + exp(alpha + beta * log(prPrSim_df$depth[i])))
prPrSim_df$outcome[i] <- rbinom(n = 1, size = 1, prob = prPrSim_df$pr[i])
}
bad_priors_plot <- ggplot(data = prPrSim_df)+
geom_point(mapping = aes(x = depth, y = pr,
shape = ' \u03b1 ~ N( \u03bc = 0, \u03c3 = 100),  \u03b2  ~ N( \u03bc = 0, \u03c3 = 100)'),
col = 'firebrick', alpha = 0.6)+
scale_shape_manual(values = 1)+
ggthemes::theme_tufte(base_size = 10, base_family = 'Bahnschrift')+
scale_x_continuous(name = 'Crack Depth, mm')+
scale_y_continuous(name = 'Prior Predictive Probability of Detection')+
theme_ddf_light()+
theme(legend.position = 'top', legend.title = element_blank())+
labs(title = 'Some surprisingly bad priors!')
library(patchwork)
comb_plot <- bad_priors_plot + good_priors_plot
comb_plot
library(tidyverse)
set.seed(1008)
N <- 40; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(aes(shape = 'Some (Simulated) Test Results'))+
scale_shape_manual(values = 4)+
scale_x_continuous(name = 'Crack Depth, mm') + scale_y_continuous(name = 'Probability of Detection')
theme_ddf_light()
library(tidyverse)
set.seed(1008)
N <- 40; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(aes(shape = 'Some (Simulated) Test Results'))+
scale_shape_manual(values = 4)+
scale_x_continuous(name = 'Crack Depth, mm') + scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 40; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
data_plot <- pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(aes(shape = 'Some (Simulated) Test Results'))+
scale_shape_manual(values = 4)+
scale_x_continuous(name = 'Crack Depth, mm') + scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
library(tidyverse)
set.seed(1008)
N <- 40; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
data_plot <- pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(aes(shape = 'Some (Simulated) Test Results'))+
scale_shape_manual(values = 4)+
scale_x_continuous(name = 'Crack Depth, mm') + scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()
data_plot
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
4/15
3/15
library(tidyverse)
set.seed(1008)
N <- 40; lower <- 0; upper <- 10; alpha_true <- -1; beta_true <- 2
depth <- runif(n = N, min = lower, max = upper)
PoD_1D <- function(depth, alpha_1D, beta_1D){
PoD <- exp(alpha_1D + beta_1D * log(depth)) / (1 + exp(alpha_1D + beta_1D * log(depth)))
return (PoD)
}
pod_df <- data.frame(depth = depth, det = double(length = N))
for (i in seq(from = 1, to = nrow(pod_df), by = 1)) {
pod_df$det[i] = rbinom(n = 1, size = 1,
prob = PoD_1D(depth = pod_df$depth[i], alpha_1D = alpha_true, beta_1D = beta_true))
}
data_plot <- pod_df %>%
ggplot(mapping = aes(x = depth, y = det))+
geom_point(aes(shape = 'Some (Simulated) Test Results'))+
scale_shape_manual(values = 4)+
scale_x_continuous(name = 'Crack Depth, mm') +
scale_y_continuous(name = 'Probability of Detection')+
theme_ddf_light()
data_plot
model_fit <- stats::glm(formula = det ~ log(depth),
data = pod_df, family = binomial(link = 'logit'))
#summary(model_fit)
pod_df
x <- c(1, 5, 8, 14, 14, 16, 16, 17, 19, 20)
mean(x)
sum(x)
median(x)
